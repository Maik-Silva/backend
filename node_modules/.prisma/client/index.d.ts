
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model gorduras
 * 
 */
export type gorduras = $Result.DefaultSelection<Prisma.$gordurasPayload>
/**
 * Model leguminosas
 * 
 */
export type leguminosas = $Result.DefaultSelection<Prisma.$leguminosasPayload>
/**
 * Model leite_e_derivados
 * 
 */
export type leite_e_derivados = $Result.DefaultSelection<Prisma.$leite_e_derivadosPayload>
/**
 * Model proteina
 * 
 */
export type proteina = $Result.DefaultSelection<Prisma.$proteinaPayload>
/**
 * Model Alimentos
 * 
 */
export type Alimentos = $Result.DefaultSelection<Prisma.$AlimentosPayload>
/**
 * Model frutas
 * 
 */
export type frutas = $Result.DefaultSelection<Prisma.$frutasPayload>
/**
 * Model sementes
 * 
 */
export type sementes = $Result.DefaultSelection<Prisma.$sementesPayload>
/**
 * Model cereais_e_tuberculos
 * 
 */
export type cereais_e_tuberculos = $Result.DefaultSelection<Prisma.$cereais_e_tuberculosPayload>
/**
 * Model verduras__hortali_as_e_derivados
 * 
 */
export type verduras__hortali_as_e_derivados = $Result.DefaultSelection<Prisma.$verduras__hortali_as_e_derivadosPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Gorduras
 * const gorduras = await prisma.gorduras.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Gorduras
   * const gorduras = await prisma.gorduras.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.gorduras`: Exposes CRUD operations for the **gorduras** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gorduras
    * const gorduras = await prisma.gorduras.findMany()
    * ```
    */
  get gorduras(): Prisma.gordurasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leguminosas`: Exposes CRUD operations for the **leguminosas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leguminosas
    * const leguminosas = await prisma.leguminosas.findMany()
    * ```
    */
  get leguminosas(): Prisma.leguminosasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leite_e_derivados`: Exposes CRUD operations for the **leite_e_derivados** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leite_e_derivados
    * const leite_e_derivados = await prisma.leite_e_derivados.findMany()
    * ```
    */
  get leite_e_derivados(): Prisma.leite_e_derivadosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.proteina`: Exposes CRUD operations for the **proteina** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proteinas
    * const proteinas = await prisma.proteina.findMany()
    * ```
    */
  get proteina(): Prisma.proteinaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alimentos`: Exposes CRUD operations for the **Alimentos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alimentos
    * const alimentos = await prisma.alimentos.findMany()
    * ```
    */
  get alimentos(): Prisma.AlimentosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.frutas`: Exposes CRUD operations for the **frutas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Frutas
    * const frutas = await prisma.frutas.findMany()
    * ```
    */
  get frutas(): Prisma.frutasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sementes`: Exposes CRUD operations for the **sementes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sementes
    * const sementes = await prisma.sementes.findMany()
    * ```
    */
  get sementes(): Prisma.sementesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cereais_e_tuberculos`: Exposes CRUD operations for the **cereais_e_tuberculos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cereais_e_tuberculos
    * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.findMany()
    * ```
    */
  get cereais_e_tuberculos(): Prisma.cereais_e_tuberculosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verduras__hortali_as_e_derivados`: Exposes CRUD operations for the **verduras__hortali_as_e_derivados** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verduras__hortali_as_e_derivados
    * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.findMany()
    * ```
    */
  get verduras__hortali_as_e_derivados(): Prisma.verduras__hortali_as_e_derivadosDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    gorduras: 'gorduras',
    leguminosas: 'leguminosas',
    leite_e_derivados: 'leite_e_derivados',
    proteina: 'proteina',
    Alimentos: 'Alimentos',
    frutas: 'frutas',
    sementes: 'sementes',
    cereais_e_tuberculos: 'cereais_e_tuberculos',
    verduras__hortali_as_e_derivados: 'verduras__hortali_as_e_derivados'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "gorduras" | "leguminosas" | "leite_e_derivados" | "proteina" | "alimentos" | "frutas" | "sementes" | "cereais_e_tuberculos" | "verduras__hortali_as_e_derivados"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      gorduras: {
        payload: Prisma.$gordurasPayload<ExtArgs>
        fields: Prisma.gordurasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gordurasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gordurasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload>
          }
          findFirst: {
            args: Prisma.gordurasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gordurasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload>
          }
          findMany: {
            args: Prisma.gordurasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload>[]
          }
          create: {
            args: Prisma.gordurasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload>
          }
          createMany: {
            args: Prisma.gordurasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.gordurasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload>
          }
          update: {
            args: Prisma.gordurasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload>
          }
          deleteMany: {
            args: Prisma.gordurasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.gordurasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.gordurasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gordurasPayload>
          }
          aggregate: {
            args: Prisma.GordurasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGorduras>
          }
          groupBy: {
            args: Prisma.gordurasGroupByArgs<ExtArgs>
            result: $Utils.Optional<GordurasGroupByOutputType>[]
          }
          count: {
            args: Prisma.gordurasCountArgs<ExtArgs>
            result: $Utils.Optional<GordurasCountAggregateOutputType> | number
          }
        }
      }
      leguminosas: {
        payload: Prisma.$leguminosasPayload<ExtArgs>
        fields: Prisma.leguminosasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.leguminosasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.leguminosasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload>
          }
          findFirst: {
            args: Prisma.leguminosasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.leguminosasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload>
          }
          findMany: {
            args: Prisma.leguminosasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload>[]
          }
          create: {
            args: Prisma.leguminosasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload>
          }
          createMany: {
            args: Prisma.leguminosasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.leguminosasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload>
          }
          update: {
            args: Prisma.leguminosasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload>
          }
          deleteMany: {
            args: Prisma.leguminosasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.leguminosasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.leguminosasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leguminosasPayload>
          }
          aggregate: {
            args: Prisma.LeguminosasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeguminosas>
          }
          groupBy: {
            args: Prisma.leguminosasGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeguminosasGroupByOutputType>[]
          }
          count: {
            args: Prisma.leguminosasCountArgs<ExtArgs>
            result: $Utils.Optional<LeguminosasCountAggregateOutputType> | number
          }
        }
      }
      leite_e_derivados: {
        payload: Prisma.$leite_e_derivadosPayload<ExtArgs>
        fields: Prisma.leite_e_derivadosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.leite_e_derivadosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.leite_e_derivadosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload>
          }
          findFirst: {
            args: Prisma.leite_e_derivadosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.leite_e_derivadosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload>
          }
          findMany: {
            args: Prisma.leite_e_derivadosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload>[]
          }
          create: {
            args: Prisma.leite_e_derivadosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload>
          }
          createMany: {
            args: Prisma.leite_e_derivadosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.leite_e_derivadosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload>
          }
          update: {
            args: Prisma.leite_e_derivadosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload>
          }
          deleteMany: {
            args: Prisma.leite_e_derivadosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.leite_e_derivadosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.leite_e_derivadosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leite_e_derivadosPayload>
          }
          aggregate: {
            args: Prisma.Leite_e_derivadosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeite_e_derivados>
          }
          groupBy: {
            args: Prisma.leite_e_derivadosGroupByArgs<ExtArgs>
            result: $Utils.Optional<Leite_e_derivadosGroupByOutputType>[]
          }
          count: {
            args: Prisma.leite_e_derivadosCountArgs<ExtArgs>
            result: $Utils.Optional<Leite_e_derivadosCountAggregateOutputType> | number
          }
        }
      }
      proteina: {
        payload: Prisma.$proteinaPayload<ExtArgs>
        fields: Prisma.proteinaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.proteinaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.proteinaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload>
          }
          findFirst: {
            args: Prisma.proteinaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.proteinaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload>
          }
          findMany: {
            args: Prisma.proteinaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload>[]
          }
          create: {
            args: Prisma.proteinaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload>
          }
          createMany: {
            args: Prisma.proteinaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.proteinaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload>
          }
          update: {
            args: Prisma.proteinaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload>
          }
          deleteMany: {
            args: Prisma.proteinaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.proteinaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.proteinaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$proteinaPayload>
          }
          aggregate: {
            args: Prisma.ProteinaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProteina>
          }
          groupBy: {
            args: Prisma.proteinaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProteinaGroupByOutputType>[]
          }
          count: {
            args: Prisma.proteinaCountArgs<ExtArgs>
            result: $Utils.Optional<ProteinaCountAggregateOutputType> | number
          }
        }
      }
      Alimentos: {
        payload: Prisma.$AlimentosPayload<ExtArgs>
        fields: Prisma.AlimentosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlimentosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlimentosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload>
          }
          findFirst: {
            args: Prisma.AlimentosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlimentosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload>
          }
          findMany: {
            args: Prisma.AlimentosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload>[]
          }
          create: {
            args: Prisma.AlimentosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload>
          }
          createMany: {
            args: Prisma.AlimentosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlimentosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload>
          }
          update: {
            args: Prisma.AlimentosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload>
          }
          deleteMany: {
            args: Prisma.AlimentosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlimentosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlimentosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlimentosPayload>
          }
          aggregate: {
            args: Prisma.AlimentosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlimentos>
          }
          groupBy: {
            args: Prisma.AlimentosGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlimentosGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlimentosCountArgs<ExtArgs>
            result: $Utils.Optional<AlimentosCountAggregateOutputType> | number
          }
        }
      }
      frutas: {
        payload: Prisma.$frutasPayload<ExtArgs>
        fields: Prisma.frutasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.frutasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.frutasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload>
          }
          findFirst: {
            args: Prisma.frutasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.frutasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload>
          }
          findMany: {
            args: Prisma.frutasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload>[]
          }
          create: {
            args: Prisma.frutasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload>
          }
          createMany: {
            args: Prisma.frutasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.frutasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload>
          }
          update: {
            args: Prisma.frutasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload>
          }
          deleteMany: {
            args: Prisma.frutasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.frutasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.frutasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$frutasPayload>
          }
          aggregate: {
            args: Prisma.FrutasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFrutas>
          }
          groupBy: {
            args: Prisma.frutasGroupByArgs<ExtArgs>
            result: $Utils.Optional<FrutasGroupByOutputType>[]
          }
          count: {
            args: Prisma.frutasCountArgs<ExtArgs>
            result: $Utils.Optional<FrutasCountAggregateOutputType> | number
          }
        }
      }
      sementes: {
        payload: Prisma.$sementesPayload<ExtArgs>
        fields: Prisma.sementesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sementesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sementesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload>
          }
          findFirst: {
            args: Prisma.sementesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sementesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload>
          }
          findMany: {
            args: Prisma.sementesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload>[]
          }
          create: {
            args: Prisma.sementesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload>
          }
          createMany: {
            args: Prisma.sementesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.sementesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload>
          }
          update: {
            args: Prisma.sementesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload>
          }
          deleteMany: {
            args: Prisma.sementesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sementesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.sementesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sementesPayload>
          }
          aggregate: {
            args: Prisma.SementesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSementes>
          }
          groupBy: {
            args: Prisma.sementesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SementesGroupByOutputType>[]
          }
          count: {
            args: Prisma.sementesCountArgs<ExtArgs>
            result: $Utils.Optional<SementesCountAggregateOutputType> | number
          }
        }
      }
      cereais_e_tuberculos: {
        payload: Prisma.$cereais_e_tuberculosPayload<ExtArgs>
        fields: Prisma.cereais_e_tuberculosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cereais_e_tuberculosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cereais_e_tuberculosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload>
          }
          findFirst: {
            args: Prisma.cereais_e_tuberculosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cereais_e_tuberculosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload>
          }
          findMany: {
            args: Prisma.cereais_e_tuberculosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload>[]
          }
          create: {
            args: Prisma.cereais_e_tuberculosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload>
          }
          createMany: {
            args: Prisma.cereais_e_tuberculosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.cereais_e_tuberculosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload>
          }
          update: {
            args: Prisma.cereais_e_tuberculosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload>
          }
          deleteMany: {
            args: Prisma.cereais_e_tuberculosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cereais_e_tuberculosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cereais_e_tuberculosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cereais_e_tuberculosPayload>
          }
          aggregate: {
            args: Prisma.Cereais_e_tuberculosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCereais_e_tuberculos>
          }
          groupBy: {
            args: Prisma.cereais_e_tuberculosGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cereais_e_tuberculosGroupByOutputType>[]
          }
          count: {
            args: Prisma.cereais_e_tuberculosCountArgs<ExtArgs>
            result: $Utils.Optional<Cereais_e_tuberculosCountAggregateOutputType> | number
          }
        }
      }
      verduras__hortali_as_e_derivados: {
        payload: Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>
        fields: Prisma.verduras__hortali_as_e_derivadosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.verduras__hortali_as_e_derivadosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.verduras__hortali_as_e_derivadosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload>
          }
          findFirst: {
            args: Prisma.verduras__hortali_as_e_derivadosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.verduras__hortali_as_e_derivadosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload>
          }
          findMany: {
            args: Prisma.verduras__hortali_as_e_derivadosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload>[]
          }
          create: {
            args: Prisma.verduras__hortali_as_e_derivadosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload>
          }
          createMany: {
            args: Prisma.verduras__hortali_as_e_derivadosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.verduras__hortali_as_e_derivadosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload>
          }
          update: {
            args: Prisma.verduras__hortali_as_e_derivadosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload>
          }
          deleteMany: {
            args: Prisma.verduras__hortali_as_e_derivadosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.verduras__hortali_as_e_derivadosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.verduras__hortali_as_e_derivadosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verduras__hortali_as_e_derivadosPayload>
          }
          aggregate: {
            args: Prisma.Verduras__hortali_as_e_derivadosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerduras__hortali_as_e_derivados>
          }
          groupBy: {
            args: Prisma.verduras__hortali_as_e_derivadosGroupByArgs<ExtArgs>
            result: $Utils.Optional<Verduras__hortali_as_e_derivadosGroupByOutputType>[]
          }
          count: {
            args: Prisma.verduras__hortali_as_e_derivadosCountArgs<ExtArgs>
            result: $Utils.Optional<Verduras__hortali_as_e_derivadosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    gorduras?: gordurasOmit
    leguminosas?: leguminosasOmit
    leite_e_derivados?: leite_e_derivadosOmit
    proteina?: proteinaOmit
    alimentos?: AlimentosOmit
    frutas?: frutasOmit
    sementes?: sementesOmit
    cereais_e_tuberculos?: cereais_e_tuberculosOmit
    verduras__hortali_as_e_derivados?: verduras__hortali_as_e_derivadosOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model gorduras
   */

  export type AggregateGorduras = {
    _count: GordurasCountAggregateOutputType | null
    _avg: GordurasAvgAggregateOutputType | null
    _sum: GordurasSumAggregateOutputType | null
    _min: GordurasMinAggregateOutputType | null
    _max: GordurasMaxAggregateOutputType | null
  }

  export type GordurasAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type GordurasSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type GordurasMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type GordurasMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type GordurasCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type GordurasAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type GordurasSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type GordurasMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type GordurasMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type GordurasCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type GordurasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which gorduras to aggregate.
     */
    where?: gordurasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gorduras to fetch.
     */
    orderBy?: gordurasOrderByWithRelationInput | gordurasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gordurasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gorduras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gorduras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned gorduras
    **/
    _count?: true | GordurasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GordurasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GordurasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GordurasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GordurasMaxAggregateInputType
  }

  export type GetGordurasAggregateType<T extends GordurasAggregateArgs> = {
        [P in keyof T & keyof AggregateGorduras]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGorduras[P]>
      : GetScalarType<T[P], AggregateGorduras[P]>
  }




  export type gordurasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gordurasWhereInput
    orderBy?: gordurasOrderByWithAggregationInput | gordurasOrderByWithAggregationInput[]
    by: GordurasScalarFieldEnum[] | GordurasScalarFieldEnum
    having?: gordurasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GordurasCountAggregateInputType | true
    _avg?: GordurasAvgAggregateInputType
    _sum?: GordurasSumAggregateInputType
    _min?: GordurasMinAggregateInputType
    _max?: GordurasMaxAggregateInputType
  }

  export type GordurasGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: GordurasCountAggregateOutputType | null
    _avg: GordurasAvgAggregateOutputType | null
    _sum: GordurasSumAggregateOutputType | null
    _min: GordurasMinAggregateOutputType | null
    _max: GordurasMaxAggregateOutputType | null
  }

  type GetGordurasGroupByPayload<T extends gordurasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GordurasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GordurasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GordurasGroupByOutputType[P]>
            : GetScalarType<T[P], GordurasGroupByOutputType[P]>
        }
      >
    >


  export type gordurasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["gorduras"]>



  export type gordurasSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type gordurasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["gorduras"]>

  export type $gordurasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "gorduras"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["gorduras"]>
    composites: {}
  }

  type gordurasGetPayload<S extends boolean | null | undefined | gordurasDefaultArgs> = $Result.GetResult<Prisma.$gordurasPayload, S>

  type gordurasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<gordurasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GordurasCountAggregateInputType | true
    }

  export interface gordurasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['gorduras'], meta: { name: 'gorduras' } }
    /**
     * Find zero or one Gorduras that matches the filter.
     * @param {gordurasFindUniqueArgs} args - Arguments to find a Gorduras
     * @example
     * // Get one Gorduras
     * const gorduras = await prisma.gorduras.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends gordurasFindUniqueArgs>(args: SelectSubset<T, gordurasFindUniqueArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Gorduras that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {gordurasFindUniqueOrThrowArgs} args - Arguments to find a Gorduras
     * @example
     * // Get one Gorduras
     * const gorduras = await prisma.gorduras.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends gordurasFindUniqueOrThrowArgs>(args: SelectSubset<T, gordurasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gorduras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gordurasFindFirstArgs} args - Arguments to find a Gorduras
     * @example
     * // Get one Gorduras
     * const gorduras = await prisma.gorduras.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends gordurasFindFirstArgs>(args?: SelectSubset<T, gordurasFindFirstArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gorduras that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gordurasFindFirstOrThrowArgs} args - Arguments to find a Gorduras
     * @example
     * // Get one Gorduras
     * const gorduras = await prisma.gorduras.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends gordurasFindFirstOrThrowArgs>(args?: SelectSubset<T, gordurasFindFirstOrThrowArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Gorduras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gordurasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gorduras
     * const gorduras = await prisma.gorduras.findMany()
     * 
     * // Get first 10 Gorduras
     * const gorduras = await prisma.gorduras.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const gordurasWithAlimentoOnly = await prisma.gorduras.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends gordurasFindManyArgs>(args?: SelectSubset<T, gordurasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Gorduras.
     * @param {gordurasCreateArgs} args - Arguments to create a Gorduras.
     * @example
     * // Create one Gorduras
     * const Gorduras = await prisma.gorduras.create({
     *   data: {
     *     // ... data to create a Gorduras
     *   }
     * })
     * 
     */
    create<T extends gordurasCreateArgs>(args: SelectSubset<T, gordurasCreateArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Gorduras.
     * @param {gordurasCreateManyArgs} args - Arguments to create many Gorduras.
     * @example
     * // Create many Gorduras
     * const gorduras = await prisma.gorduras.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends gordurasCreateManyArgs>(args?: SelectSubset<T, gordurasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Gorduras.
     * @param {gordurasDeleteArgs} args - Arguments to delete one Gorduras.
     * @example
     * // Delete one Gorduras
     * const Gorduras = await prisma.gorduras.delete({
     *   where: {
     *     // ... filter to delete one Gorduras
     *   }
     * })
     * 
     */
    delete<T extends gordurasDeleteArgs>(args: SelectSubset<T, gordurasDeleteArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Gorduras.
     * @param {gordurasUpdateArgs} args - Arguments to update one Gorduras.
     * @example
     * // Update one Gorduras
     * const gorduras = await prisma.gorduras.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends gordurasUpdateArgs>(args: SelectSubset<T, gordurasUpdateArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Gorduras.
     * @param {gordurasDeleteManyArgs} args - Arguments to filter Gorduras to delete.
     * @example
     * // Delete a few Gorduras
     * const { count } = await prisma.gorduras.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends gordurasDeleteManyArgs>(args?: SelectSubset<T, gordurasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gorduras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gordurasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gorduras
     * const gorduras = await prisma.gorduras.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends gordurasUpdateManyArgs>(args: SelectSubset<T, gordurasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gorduras.
     * @param {gordurasUpsertArgs} args - Arguments to update or create a Gorduras.
     * @example
     * // Update or create a Gorduras
     * const gorduras = await prisma.gorduras.upsert({
     *   create: {
     *     // ... data to create a Gorduras
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gorduras we want to update
     *   }
     * })
     */
    upsert<T extends gordurasUpsertArgs>(args: SelectSubset<T, gordurasUpsertArgs<ExtArgs>>): Prisma__gordurasClient<$Result.GetResult<Prisma.$gordurasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Gorduras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gordurasCountArgs} args - Arguments to filter Gorduras to count.
     * @example
     * // Count the number of Gorduras
     * const count = await prisma.gorduras.count({
     *   where: {
     *     // ... the filter for the Gorduras we want to count
     *   }
     * })
    **/
    count<T extends gordurasCountArgs>(
      args?: Subset<T, gordurasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GordurasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gorduras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GordurasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GordurasAggregateArgs>(args: Subset<T, GordurasAggregateArgs>): Prisma.PrismaPromise<GetGordurasAggregateType<T>>

    /**
     * Group by Gorduras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gordurasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gordurasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gordurasGroupByArgs['orderBy'] }
        : { orderBy?: gordurasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gordurasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGordurasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the gorduras model
   */
  readonly fields: gordurasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for gorduras.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gordurasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the gorduras model
   */
  interface gordurasFieldRefs {
    readonly Alimento: FieldRef<"gorduras", 'String'>
    readonly Quantidade__g_: FieldRef<"gorduras", 'Int'>
    readonly Energia__Kcal_: FieldRef<"gorduras", 'Int'>
    readonly id: FieldRef<"gorduras", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * gorduras findUnique
   */
  export type gordurasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * Filter, which gorduras to fetch.
     */
    where: gordurasWhereUniqueInput
  }

  /**
   * gorduras findUniqueOrThrow
   */
  export type gordurasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * Filter, which gorduras to fetch.
     */
    where: gordurasWhereUniqueInput
  }

  /**
   * gorduras findFirst
   */
  export type gordurasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * Filter, which gorduras to fetch.
     */
    where?: gordurasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gorduras to fetch.
     */
    orderBy?: gordurasOrderByWithRelationInput | gordurasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gorduras.
     */
    cursor?: gordurasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gorduras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gorduras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gorduras.
     */
    distinct?: GordurasScalarFieldEnum | GordurasScalarFieldEnum[]
  }

  /**
   * gorduras findFirstOrThrow
   */
  export type gordurasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * Filter, which gorduras to fetch.
     */
    where?: gordurasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gorduras to fetch.
     */
    orderBy?: gordurasOrderByWithRelationInput | gordurasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gorduras.
     */
    cursor?: gordurasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gorduras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gorduras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gorduras.
     */
    distinct?: GordurasScalarFieldEnum | GordurasScalarFieldEnum[]
  }

  /**
   * gorduras findMany
   */
  export type gordurasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * Filter, which gorduras to fetch.
     */
    where?: gordurasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gorduras to fetch.
     */
    orderBy?: gordurasOrderByWithRelationInput | gordurasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing gorduras.
     */
    cursor?: gordurasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gorduras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gorduras.
     */
    skip?: number
    distinct?: GordurasScalarFieldEnum | GordurasScalarFieldEnum[]
  }

  /**
   * gorduras create
   */
  export type gordurasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * The data needed to create a gorduras.
     */
    data?: XOR<gordurasCreateInput, gordurasUncheckedCreateInput>
  }

  /**
   * gorduras createMany
   */
  export type gordurasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many gorduras.
     */
    data: gordurasCreateManyInput | gordurasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * gorduras update
   */
  export type gordurasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * The data needed to update a gorduras.
     */
    data: XOR<gordurasUpdateInput, gordurasUncheckedUpdateInput>
    /**
     * Choose, which gorduras to update.
     */
    where: gordurasWhereUniqueInput
  }

  /**
   * gorduras updateMany
   */
  export type gordurasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update gorduras.
     */
    data: XOR<gordurasUpdateManyMutationInput, gordurasUncheckedUpdateManyInput>
    /**
     * Filter which gorduras to update
     */
    where?: gordurasWhereInput
    /**
     * Limit how many gorduras to update.
     */
    limit?: number
  }

  /**
   * gorduras upsert
   */
  export type gordurasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * The filter to search for the gorduras to update in case it exists.
     */
    where: gordurasWhereUniqueInput
    /**
     * In case the gorduras found by the `where` argument doesn't exist, create a new gorduras with this data.
     */
    create: XOR<gordurasCreateInput, gordurasUncheckedCreateInput>
    /**
     * In case the gorduras was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gordurasUpdateInput, gordurasUncheckedUpdateInput>
  }

  /**
   * gorduras delete
   */
  export type gordurasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
    /**
     * Filter which gorduras to delete.
     */
    where: gordurasWhereUniqueInput
  }

  /**
   * gorduras deleteMany
   */
  export type gordurasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which gorduras to delete
     */
    where?: gordurasWhereInput
    /**
     * Limit how many gorduras to delete.
     */
    limit?: number
  }

  /**
   * gorduras without action
   */
  export type gordurasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gorduras
     */
    select?: gordurasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gorduras
     */
    omit?: gordurasOmit<ExtArgs> | null
  }


  /**
   * Model leguminosas
   */

  export type AggregateLeguminosas = {
    _count: LeguminosasCountAggregateOutputType | null
    _avg: LeguminosasAvgAggregateOutputType | null
    _sum: LeguminosasSumAggregateOutputType | null
    _min: LeguminosasMinAggregateOutputType | null
    _max: LeguminosasMaxAggregateOutputType | null
  }

  export type LeguminosasAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type LeguminosasSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type LeguminosasMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type LeguminosasMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type LeguminosasCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type LeguminosasAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type LeguminosasSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type LeguminosasMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type LeguminosasMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type LeguminosasCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type LeguminosasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leguminosas to aggregate.
     */
    where?: leguminosasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leguminosas to fetch.
     */
    orderBy?: leguminosasOrderByWithRelationInput | leguminosasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: leguminosasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leguminosas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leguminosas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned leguminosas
    **/
    _count?: true | LeguminosasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeguminosasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeguminosasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeguminosasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeguminosasMaxAggregateInputType
  }

  export type GetLeguminosasAggregateType<T extends LeguminosasAggregateArgs> = {
        [P in keyof T & keyof AggregateLeguminosas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeguminosas[P]>
      : GetScalarType<T[P], AggregateLeguminosas[P]>
  }




  export type leguminosasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: leguminosasWhereInput
    orderBy?: leguminosasOrderByWithAggregationInput | leguminosasOrderByWithAggregationInput[]
    by: LeguminosasScalarFieldEnum[] | LeguminosasScalarFieldEnum
    having?: leguminosasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeguminosasCountAggregateInputType | true
    _avg?: LeguminosasAvgAggregateInputType
    _sum?: LeguminosasSumAggregateInputType
    _min?: LeguminosasMinAggregateInputType
    _max?: LeguminosasMaxAggregateInputType
  }

  export type LeguminosasGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: LeguminosasCountAggregateOutputType | null
    _avg: LeguminosasAvgAggregateOutputType | null
    _sum: LeguminosasSumAggregateOutputType | null
    _min: LeguminosasMinAggregateOutputType | null
    _max: LeguminosasMaxAggregateOutputType | null
  }

  type GetLeguminosasGroupByPayload<T extends leguminosasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeguminosasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeguminosasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeguminosasGroupByOutputType[P]>
            : GetScalarType<T[P], LeguminosasGroupByOutputType[P]>
        }
      >
    >


  export type leguminosasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["leguminosas"]>



  export type leguminosasSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type leguminosasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["leguminosas"]>

  export type $leguminosasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "leguminosas"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["leguminosas"]>
    composites: {}
  }

  type leguminosasGetPayload<S extends boolean | null | undefined | leguminosasDefaultArgs> = $Result.GetResult<Prisma.$leguminosasPayload, S>

  type leguminosasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<leguminosasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeguminosasCountAggregateInputType | true
    }

  export interface leguminosasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['leguminosas'], meta: { name: 'leguminosas' } }
    /**
     * Find zero or one Leguminosas that matches the filter.
     * @param {leguminosasFindUniqueArgs} args - Arguments to find a Leguminosas
     * @example
     * // Get one Leguminosas
     * const leguminosas = await prisma.leguminosas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends leguminosasFindUniqueArgs>(args: SelectSubset<T, leguminosasFindUniqueArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Leguminosas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {leguminosasFindUniqueOrThrowArgs} args - Arguments to find a Leguminosas
     * @example
     * // Get one Leguminosas
     * const leguminosas = await prisma.leguminosas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends leguminosasFindUniqueOrThrowArgs>(args: SelectSubset<T, leguminosasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leguminosas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leguminosasFindFirstArgs} args - Arguments to find a Leguminosas
     * @example
     * // Get one Leguminosas
     * const leguminosas = await prisma.leguminosas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends leguminosasFindFirstArgs>(args?: SelectSubset<T, leguminosasFindFirstArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leguminosas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leguminosasFindFirstOrThrowArgs} args - Arguments to find a Leguminosas
     * @example
     * // Get one Leguminosas
     * const leguminosas = await prisma.leguminosas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends leguminosasFindFirstOrThrowArgs>(args?: SelectSubset<T, leguminosasFindFirstOrThrowArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leguminosas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leguminosasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leguminosas
     * const leguminosas = await prisma.leguminosas.findMany()
     * 
     * // Get first 10 Leguminosas
     * const leguminosas = await prisma.leguminosas.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const leguminosasWithAlimentoOnly = await prisma.leguminosas.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends leguminosasFindManyArgs>(args?: SelectSubset<T, leguminosasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Leguminosas.
     * @param {leguminosasCreateArgs} args - Arguments to create a Leguminosas.
     * @example
     * // Create one Leguminosas
     * const Leguminosas = await prisma.leguminosas.create({
     *   data: {
     *     // ... data to create a Leguminosas
     *   }
     * })
     * 
     */
    create<T extends leguminosasCreateArgs>(args: SelectSubset<T, leguminosasCreateArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leguminosas.
     * @param {leguminosasCreateManyArgs} args - Arguments to create many Leguminosas.
     * @example
     * // Create many Leguminosas
     * const leguminosas = await prisma.leguminosas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends leguminosasCreateManyArgs>(args?: SelectSubset<T, leguminosasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Leguminosas.
     * @param {leguminosasDeleteArgs} args - Arguments to delete one Leguminosas.
     * @example
     * // Delete one Leguminosas
     * const Leguminosas = await prisma.leguminosas.delete({
     *   where: {
     *     // ... filter to delete one Leguminosas
     *   }
     * })
     * 
     */
    delete<T extends leguminosasDeleteArgs>(args: SelectSubset<T, leguminosasDeleteArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Leguminosas.
     * @param {leguminosasUpdateArgs} args - Arguments to update one Leguminosas.
     * @example
     * // Update one Leguminosas
     * const leguminosas = await prisma.leguminosas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends leguminosasUpdateArgs>(args: SelectSubset<T, leguminosasUpdateArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leguminosas.
     * @param {leguminosasDeleteManyArgs} args - Arguments to filter Leguminosas to delete.
     * @example
     * // Delete a few Leguminosas
     * const { count } = await prisma.leguminosas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends leguminosasDeleteManyArgs>(args?: SelectSubset<T, leguminosasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leguminosas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leguminosasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leguminosas
     * const leguminosas = await prisma.leguminosas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends leguminosasUpdateManyArgs>(args: SelectSubset<T, leguminosasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Leguminosas.
     * @param {leguminosasUpsertArgs} args - Arguments to update or create a Leguminosas.
     * @example
     * // Update or create a Leguminosas
     * const leguminosas = await prisma.leguminosas.upsert({
     *   create: {
     *     // ... data to create a Leguminosas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leguminosas we want to update
     *   }
     * })
     */
    upsert<T extends leguminosasUpsertArgs>(args: SelectSubset<T, leguminosasUpsertArgs<ExtArgs>>): Prisma__leguminosasClient<$Result.GetResult<Prisma.$leguminosasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leguminosas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leguminosasCountArgs} args - Arguments to filter Leguminosas to count.
     * @example
     * // Count the number of Leguminosas
     * const count = await prisma.leguminosas.count({
     *   where: {
     *     // ... the filter for the Leguminosas we want to count
     *   }
     * })
    **/
    count<T extends leguminosasCountArgs>(
      args?: Subset<T, leguminosasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeguminosasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leguminosas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeguminosasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeguminosasAggregateArgs>(args: Subset<T, LeguminosasAggregateArgs>): Prisma.PrismaPromise<GetLeguminosasAggregateType<T>>

    /**
     * Group by Leguminosas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leguminosasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends leguminosasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: leguminosasGroupByArgs['orderBy'] }
        : { orderBy?: leguminosasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, leguminosasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeguminosasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the leguminosas model
   */
  readonly fields: leguminosasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for leguminosas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__leguminosasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the leguminosas model
   */
  interface leguminosasFieldRefs {
    readonly Alimento: FieldRef<"leguminosas", 'String'>
    readonly Quantidade__g_: FieldRef<"leguminosas", 'Int'>
    readonly Energia__Kcal_: FieldRef<"leguminosas", 'Int'>
    readonly id: FieldRef<"leguminosas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * leguminosas findUnique
   */
  export type leguminosasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * Filter, which leguminosas to fetch.
     */
    where: leguminosasWhereUniqueInput
  }

  /**
   * leguminosas findUniqueOrThrow
   */
  export type leguminosasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * Filter, which leguminosas to fetch.
     */
    where: leguminosasWhereUniqueInput
  }

  /**
   * leguminosas findFirst
   */
  export type leguminosasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * Filter, which leguminosas to fetch.
     */
    where?: leguminosasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leguminosas to fetch.
     */
    orderBy?: leguminosasOrderByWithRelationInput | leguminosasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leguminosas.
     */
    cursor?: leguminosasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leguminosas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leguminosas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leguminosas.
     */
    distinct?: LeguminosasScalarFieldEnum | LeguminosasScalarFieldEnum[]
  }

  /**
   * leguminosas findFirstOrThrow
   */
  export type leguminosasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * Filter, which leguminosas to fetch.
     */
    where?: leguminosasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leguminosas to fetch.
     */
    orderBy?: leguminosasOrderByWithRelationInput | leguminosasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leguminosas.
     */
    cursor?: leguminosasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leguminosas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leguminosas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leguminosas.
     */
    distinct?: LeguminosasScalarFieldEnum | LeguminosasScalarFieldEnum[]
  }

  /**
   * leguminosas findMany
   */
  export type leguminosasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * Filter, which leguminosas to fetch.
     */
    where?: leguminosasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leguminosas to fetch.
     */
    orderBy?: leguminosasOrderByWithRelationInput | leguminosasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing leguminosas.
     */
    cursor?: leguminosasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leguminosas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leguminosas.
     */
    skip?: number
    distinct?: LeguminosasScalarFieldEnum | LeguminosasScalarFieldEnum[]
  }

  /**
   * leguminosas create
   */
  export type leguminosasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * The data needed to create a leguminosas.
     */
    data?: XOR<leguminosasCreateInput, leguminosasUncheckedCreateInput>
  }

  /**
   * leguminosas createMany
   */
  export type leguminosasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many leguminosas.
     */
    data: leguminosasCreateManyInput | leguminosasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * leguminosas update
   */
  export type leguminosasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * The data needed to update a leguminosas.
     */
    data: XOR<leguminosasUpdateInput, leguminosasUncheckedUpdateInput>
    /**
     * Choose, which leguminosas to update.
     */
    where: leguminosasWhereUniqueInput
  }

  /**
   * leguminosas updateMany
   */
  export type leguminosasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update leguminosas.
     */
    data: XOR<leguminosasUpdateManyMutationInput, leguminosasUncheckedUpdateManyInput>
    /**
     * Filter which leguminosas to update
     */
    where?: leguminosasWhereInput
    /**
     * Limit how many leguminosas to update.
     */
    limit?: number
  }

  /**
   * leguminosas upsert
   */
  export type leguminosasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * The filter to search for the leguminosas to update in case it exists.
     */
    where: leguminosasWhereUniqueInput
    /**
     * In case the leguminosas found by the `where` argument doesn't exist, create a new leguminosas with this data.
     */
    create: XOR<leguminosasCreateInput, leguminosasUncheckedCreateInput>
    /**
     * In case the leguminosas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<leguminosasUpdateInput, leguminosasUncheckedUpdateInput>
  }

  /**
   * leguminosas delete
   */
  export type leguminosasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
    /**
     * Filter which leguminosas to delete.
     */
    where: leguminosasWhereUniqueInput
  }

  /**
   * leguminosas deleteMany
   */
  export type leguminosasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leguminosas to delete
     */
    where?: leguminosasWhereInput
    /**
     * Limit how many leguminosas to delete.
     */
    limit?: number
  }

  /**
   * leguminosas without action
   */
  export type leguminosasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leguminosas
     */
    select?: leguminosasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leguminosas
     */
    omit?: leguminosasOmit<ExtArgs> | null
  }


  /**
   * Model leite_e_derivados
   */

  export type AggregateLeite_e_derivados = {
    _count: Leite_e_derivadosCountAggregateOutputType | null
    _avg: Leite_e_derivadosAvgAggregateOutputType | null
    _sum: Leite_e_derivadosSumAggregateOutputType | null
    _min: Leite_e_derivadosMinAggregateOutputType | null
    _max: Leite_e_derivadosMaxAggregateOutputType | null
  }

  export type Leite_e_derivadosAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Leite_e_derivadosSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Leite_e_derivadosMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Leite_e_derivadosMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Leite_e_derivadosCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type Leite_e_derivadosAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Leite_e_derivadosSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Leite_e_derivadosMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Leite_e_derivadosMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Leite_e_derivadosCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type Leite_e_derivadosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leite_e_derivados to aggregate.
     */
    where?: leite_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leite_e_derivados to fetch.
     */
    orderBy?: leite_e_derivadosOrderByWithRelationInput | leite_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: leite_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leite_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leite_e_derivados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned leite_e_derivados
    **/
    _count?: true | Leite_e_derivadosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Leite_e_derivadosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Leite_e_derivadosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Leite_e_derivadosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Leite_e_derivadosMaxAggregateInputType
  }

  export type GetLeite_e_derivadosAggregateType<T extends Leite_e_derivadosAggregateArgs> = {
        [P in keyof T & keyof AggregateLeite_e_derivados]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeite_e_derivados[P]>
      : GetScalarType<T[P], AggregateLeite_e_derivados[P]>
  }




  export type leite_e_derivadosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: leite_e_derivadosWhereInput
    orderBy?: leite_e_derivadosOrderByWithAggregationInput | leite_e_derivadosOrderByWithAggregationInput[]
    by: Leite_e_derivadosScalarFieldEnum[] | Leite_e_derivadosScalarFieldEnum
    having?: leite_e_derivadosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Leite_e_derivadosCountAggregateInputType | true
    _avg?: Leite_e_derivadosAvgAggregateInputType
    _sum?: Leite_e_derivadosSumAggregateInputType
    _min?: Leite_e_derivadosMinAggregateInputType
    _max?: Leite_e_derivadosMaxAggregateInputType
  }

  export type Leite_e_derivadosGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: Leite_e_derivadosCountAggregateOutputType | null
    _avg: Leite_e_derivadosAvgAggregateOutputType | null
    _sum: Leite_e_derivadosSumAggregateOutputType | null
    _min: Leite_e_derivadosMinAggregateOutputType | null
    _max: Leite_e_derivadosMaxAggregateOutputType | null
  }

  type GetLeite_e_derivadosGroupByPayload<T extends leite_e_derivadosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Leite_e_derivadosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Leite_e_derivadosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Leite_e_derivadosGroupByOutputType[P]>
            : GetScalarType<T[P], Leite_e_derivadosGroupByOutputType[P]>
        }
      >
    >


  export type leite_e_derivadosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["leite_e_derivados"]>



  export type leite_e_derivadosSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type leite_e_derivadosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["leite_e_derivados"]>

  export type $leite_e_derivadosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "leite_e_derivados"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["leite_e_derivados"]>
    composites: {}
  }

  type leite_e_derivadosGetPayload<S extends boolean | null | undefined | leite_e_derivadosDefaultArgs> = $Result.GetResult<Prisma.$leite_e_derivadosPayload, S>

  type leite_e_derivadosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<leite_e_derivadosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Leite_e_derivadosCountAggregateInputType | true
    }

  export interface leite_e_derivadosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['leite_e_derivados'], meta: { name: 'leite_e_derivados' } }
    /**
     * Find zero or one Leite_e_derivados that matches the filter.
     * @param {leite_e_derivadosFindUniqueArgs} args - Arguments to find a Leite_e_derivados
     * @example
     * // Get one Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends leite_e_derivadosFindUniqueArgs>(args: SelectSubset<T, leite_e_derivadosFindUniqueArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Leite_e_derivados that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {leite_e_derivadosFindUniqueOrThrowArgs} args - Arguments to find a Leite_e_derivados
     * @example
     * // Get one Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends leite_e_derivadosFindUniqueOrThrowArgs>(args: SelectSubset<T, leite_e_derivadosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leite_e_derivados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leite_e_derivadosFindFirstArgs} args - Arguments to find a Leite_e_derivados
     * @example
     * // Get one Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends leite_e_derivadosFindFirstArgs>(args?: SelectSubset<T, leite_e_derivadosFindFirstArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leite_e_derivados that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leite_e_derivadosFindFirstOrThrowArgs} args - Arguments to find a Leite_e_derivados
     * @example
     * // Get one Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends leite_e_derivadosFindFirstOrThrowArgs>(args?: SelectSubset<T, leite_e_derivadosFindFirstOrThrowArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leite_e_derivados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leite_e_derivadosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.findMany()
     * 
     * // Get first 10 Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const leite_e_derivadosWithAlimentoOnly = await prisma.leite_e_derivados.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends leite_e_derivadosFindManyArgs>(args?: SelectSubset<T, leite_e_derivadosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Leite_e_derivados.
     * @param {leite_e_derivadosCreateArgs} args - Arguments to create a Leite_e_derivados.
     * @example
     * // Create one Leite_e_derivados
     * const Leite_e_derivados = await prisma.leite_e_derivados.create({
     *   data: {
     *     // ... data to create a Leite_e_derivados
     *   }
     * })
     * 
     */
    create<T extends leite_e_derivadosCreateArgs>(args: SelectSubset<T, leite_e_derivadosCreateArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leite_e_derivados.
     * @param {leite_e_derivadosCreateManyArgs} args - Arguments to create many Leite_e_derivados.
     * @example
     * // Create many Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends leite_e_derivadosCreateManyArgs>(args?: SelectSubset<T, leite_e_derivadosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Leite_e_derivados.
     * @param {leite_e_derivadosDeleteArgs} args - Arguments to delete one Leite_e_derivados.
     * @example
     * // Delete one Leite_e_derivados
     * const Leite_e_derivados = await prisma.leite_e_derivados.delete({
     *   where: {
     *     // ... filter to delete one Leite_e_derivados
     *   }
     * })
     * 
     */
    delete<T extends leite_e_derivadosDeleteArgs>(args: SelectSubset<T, leite_e_derivadosDeleteArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Leite_e_derivados.
     * @param {leite_e_derivadosUpdateArgs} args - Arguments to update one Leite_e_derivados.
     * @example
     * // Update one Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends leite_e_derivadosUpdateArgs>(args: SelectSubset<T, leite_e_derivadosUpdateArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leite_e_derivados.
     * @param {leite_e_derivadosDeleteManyArgs} args - Arguments to filter Leite_e_derivados to delete.
     * @example
     * // Delete a few Leite_e_derivados
     * const { count } = await prisma.leite_e_derivados.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends leite_e_derivadosDeleteManyArgs>(args?: SelectSubset<T, leite_e_derivadosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leite_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leite_e_derivadosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends leite_e_derivadosUpdateManyArgs>(args: SelectSubset<T, leite_e_derivadosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Leite_e_derivados.
     * @param {leite_e_derivadosUpsertArgs} args - Arguments to update or create a Leite_e_derivados.
     * @example
     * // Update or create a Leite_e_derivados
     * const leite_e_derivados = await prisma.leite_e_derivados.upsert({
     *   create: {
     *     // ... data to create a Leite_e_derivados
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leite_e_derivados we want to update
     *   }
     * })
     */
    upsert<T extends leite_e_derivadosUpsertArgs>(args: SelectSubset<T, leite_e_derivadosUpsertArgs<ExtArgs>>): Prisma__leite_e_derivadosClient<$Result.GetResult<Prisma.$leite_e_derivadosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leite_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leite_e_derivadosCountArgs} args - Arguments to filter Leite_e_derivados to count.
     * @example
     * // Count the number of Leite_e_derivados
     * const count = await prisma.leite_e_derivados.count({
     *   where: {
     *     // ... the filter for the Leite_e_derivados we want to count
     *   }
     * })
    **/
    count<T extends leite_e_derivadosCountArgs>(
      args?: Subset<T, leite_e_derivadosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Leite_e_derivadosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leite_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Leite_e_derivadosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Leite_e_derivadosAggregateArgs>(args: Subset<T, Leite_e_derivadosAggregateArgs>): Prisma.PrismaPromise<GetLeite_e_derivadosAggregateType<T>>

    /**
     * Group by Leite_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leite_e_derivadosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends leite_e_derivadosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: leite_e_derivadosGroupByArgs['orderBy'] }
        : { orderBy?: leite_e_derivadosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, leite_e_derivadosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeite_e_derivadosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the leite_e_derivados model
   */
  readonly fields: leite_e_derivadosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for leite_e_derivados.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__leite_e_derivadosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the leite_e_derivados model
   */
  interface leite_e_derivadosFieldRefs {
    readonly Alimento: FieldRef<"leite_e_derivados", 'String'>
    readonly Quantidade__g_: FieldRef<"leite_e_derivados", 'Int'>
    readonly Energia__Kcal_: FieldRef<"leite_e_derivados", 'Int'>
    readonly id: FieldRef<"leite_e_derivados", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * leite_e_derivados findUnique
   */
  export type leite_e_derivadosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which leite_e_derivados to fetch.
     */
    where: leite_e_derivadosWhereUniqueInput
  }

  /**
   * leite_e_derivados findUniqueOrThrow
   */
  export type leite_e_derivadosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which leite_e_derivados to fetch.
     */
    where: leite_e_derivadosWhereUniqueInput
  }

  /**
   * leite_e_derivados findFirst
   */
  export type leite_e_derivadosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which leite_e_derivados to fetch.
     */
    where?: leite_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leite_e_derivados to fetch.
     */
    orderBy?: leite_e_derivadosOrderByWithRelationInput | leite_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leite_e_derivados.
     */
    cursor?: leite_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leite_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leite_e_derivados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leite_e_derivados.
     */
    distinct?: Leite_e_derivadosScalarFieldEnum | Leite_e_derivadosScalarFieldEnum[]
  }

  /**
   * leite_e_derivados findFirstOrThrow
   */
  export type leite_e_derivadosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which leite_e_derivados to fetch.
     */
    where?: leite_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leite_e_derivados to fetch.
     */
    orderBy?: leite_e_derivadosOrderByWithRelationInput | leite_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leite_e_derivados.
     */
    cursor?: leite_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leite_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leite_e_derivados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leite_e_derivados.
     */
    distinct?: Leite_e_derivadosScalarFieldEnum | Leite_e_derivadosScalarFieldEnum[]
  }

  /**
   * leite_e_derivados findMany
   */
  export type leite_e_derivadosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which leite_e_derivados to fetch.
     */
    where?: leite_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leite_e_derivados to fetch.
     */
    orderBy?: leite_e_derivadosOrderByWithRelationInput | leite_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing leite_e_derivados.
     */
    cursor?: leite_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leite_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leite_e_derivados.
     */
    skip?: number
    distinct?: Leite_e_derivadosScalarFieldEnum | Leite_e_derivadosScalarFieldEnum[]
  }

  /**
   * leite_e_derivados create
   */
  export type leite_e_derivadosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * The data needed to create a leite_e_derivados.
     */
    data?: XOR<leite_e_derivadosCreateInput, leite_e_derivadosUncheckedCreateInput>
  }

  /**
   * leite_e_derivados createMany
   */
  export type leite_e_derivadosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many leite_e_derivados.
     */
    data: leite_e_derivadosCreateManyInput | leite_e_derivadosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * leite_e_derivados update
   */
  export type leite_e_derivadosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * The data needed to update a leite_e_derivados.
     */
    data: XOR<leite_e_derivadosUpdateInput, leite_e_derivadosUncheckedUpdateInput>
    /**
     * Choose, which leite_e_derivados to update.
     */
    where: leite_e_derivadosWhereUniqueInput
  }

  /**
   * leite_e_derivados updateMany
   */
  export type leite_e_derivadosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update leite_e_derivados.
     */
    data: XOR<leite_e_derivadosUpdateManyMutationInput, leite_e_derivadosUncheckedUpdateManyInput>
    /**
     * Filter which leite_e_derivados to update
     */
    where?: leite_e_derivadosWhereInput
    /**
     * Limit how many leite_e_derivados to update.
     */
    limit?: number
  }

  /**
   * leite_e_derivados upsert
   */
  export type leite_e_derivadosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * The filter to search for the leite_e_derivados to update in case it exists.
     */
    where: leite_e_derivadosWhereUniqueInput
    /**
     * In case the leite_e_derivados found by the `where` argument doesn't exist, create a new leite_e_derivados with this data.
     */
    create: XOR<leite_e_derivadosCreateInput, leite_e_derivadosUncheckedCreateInput>
    /**
     * In case the leite_e_derivados was found with the provided `where` argument, update it with this data.
     */
    update: XOR<leite_e_derivadosUpdateInput, leite_e_derivadosUncheckedUpdateInput>
  }

  /**
   * leite_e_derivados delete
   */
  export type leite_e_derivadosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter which leite_e_derivados to delete.
     */
    where: leite_e_derivadosWhereUniqueInput
  }

  /**
   * leite_e_derivados deleteMany
   */
  export type leite_e_derivadosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leite_e_derivados to delete
     */
    where?: leite_e_derivadosWhereInput
    /**
     * Limit how many leite_e_derivados to delete.
     */
    limit?: number
  }

  /**
   * leite_e_derivados without action
   */
  export type leite_e_derivadosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leite_e_derivados
     */
    select?: leite_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the leite_e_derivados
     */
    omit?: leite_e_derivadosOmit<ExtArgs> | null
  }


  /**
   * Model proteina
   */

  export type AggregateProteina = {
    _count: ProteinaCountAggregateOutputType | null
    _avg: ProteinaAvgAggregateOutputType | null
    _sum: ProteinaSumAggregateOutputType | null
    _min: ProteinaMinAggregateOutputType | null
    _max: ProteinaMaxAggregateOutputType | null
  }

  export type ProteinaAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type ProteinaSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type ProteinaMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type ProteinaMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type ProteinaCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type ProteinaAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type ProteinaSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type ProteinaMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type ProteinaMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type ProteinaCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type ProteinaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which proteina to aggregate.
     */
    where?: proteinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of proteinas to fetch.
     */
    orderBy?: proteinaOrderByWithRelationInput | proteinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: proteinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` proteinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` proteinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned proteinas
    **/
    _count?: true | ProteinaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProteinaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProteinaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProteinaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProteinaMaxAggregateInputType
  }

  export type GetProteinaAggregateType<T extends ProteinaAggregateArgs> = {
        [P in keyof T & keyof AggregateProteina]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProteina[P]>
      : GetScalarType<T[P], AggregateProteina[P]>
  }




  export type proteinaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: proteinaWhereInput
    orderBy?: proteinaOrderByWithAggregationInput | proteinaOrderByWithAggregationInput[]
    by: ProteinaScalarFieldEnum[] | ProteinaScalarFieldEnum
    having?: proteinaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProteinaCountAggregateInputType | true
    _avg?: ProteinaAvgAggregateInputType
    _sum?: ProteinaSumAggregateInputType
    _min?: ProteinaMinAggregateInputType
    _max?: ProteinaMaxAggregateInputType
  }

  export type ProteinaGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: ProteinaCountAggregateOutputType | null
    _avg: ProteinaAvgAggregateOutputType | null
    _sum: ProteinaSumAggregateOutputType | null
    _min: ProteinaMinAggregateOutputType | null
    _max: ProteinaMaxAggregateOutputType | null
  }

  type GetProteinaGroupByPayload<T extends proteinaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProteinaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProteinaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProteinaGroupByOutputType[P]>
            : GetScalarType<T[P], ProteinaGroupByOutputType[P]>
        }
      >
    >


  export type proteinaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["proteina"]>



  export type proteinaSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type proteinaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["proteina"]>

  export type $proteinaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "proteina"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["proteina"]>
    composites: {}
  }

  type proteinaGetPayload<S extends boolean | null | undefined | proteinaDefaultArgs> = $Result.GetResult<Prisma.$proteinaPayload, S>

  type proteinaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<proteinaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProteinaCountAggregateInputType | true
    }

  export interface proteinaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['proteina'], meta: { name: 'proteina' } }
    /**
     * Find zero or one Proteina that matches the filter.
     * @param {proteinaFindUniqueArgs} args - Arguments to find a Proteina
     * @example
     * // Get one Proteina
     * const proteina = await prisma.proteina.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends proteinaFindUniqueArgs>(args: SelectSubset<T, proteinaFindUniqueArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Proteina that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {proteinaFindUniqueOrThrowArgs} args - Arguments to find a Proteina
     * @example
     * // Get one Proteina
     * const proteina = await prisma.proteina.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends proteinaFindUniqueOrThrowArgs>(args: SelectSubset<T, proteinaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Proteina that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {proteinaFindFirstArgs} args - Arguments to find a Proteina
     * @example
     * // Get one Proteina
     * const proteina = await prisma.proteina.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends proteinaFindFirstArgs>(args?: SelectSubset<T, proteinaFindFirstArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Proteina that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {proteinaFindFirstOrThrowArgs} args - Arguments to find a Proteina
     * @example
     * // Get one Proteina
     * const proteina = await prisma.proteina.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends proteinaFindFirstOrThrowArgs>(args?: SelectSubset<T, proteinaFindFirstOrThrowArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Proteinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {proteinaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proteinas
     * const proteinas = await prisma.proteina.findMany()
     * 
     * // Get first 10 Proteinas
     * const proteinas = await prisma.proteina.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const proteinaWithAlimentoOnly = await prisma.proteina.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends proteinaFindManyArgs>(args?: SelectSubset<T, proteinaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Proteina.
     * @param {proteinaCreateArgs} args - Arguments to create a Proteina.
     * @example
     * // Create one Proteina
     * const Proteina = await prisma.proteina.create({
     *   data: {
     *     // ... data to create a Proteina
     *   }
     * })
     * 
     */
    create<T extends proteinaCreateArgs>(args: SelectSubset<T, proteinaCreateArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Proteinas.
     * @param {proteinaCreateManyArgs} args - Arguments to create many Proteinas.
     * @example
     * // Create many Proteinas
     * const proteina = await prisma.proteina.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends proteinaCreateManyArgs>(args?: SelectSubset<T, proteinaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Proteina.
     * @param {proteinaDeleteArgs} args - Arguments to delete one Proteina.
     * @example
     * // Delete one Proteina
     * const Proteina = await prisma.proteina.delete({
     *   where: {
     *     // ... filter to delete one Proteina
     *   }
     * })
     * 
     */
    delete<T extends proteinaDeleteArgs>(args: SelectSubset<T, proteinaDeleteArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Proteina.
     * @param {proteinaUpdateArgs} args - Arguments to update one Proteina.
     * @example
     * // Update one Proteina
     * const proteina = await prisma.proteina.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends proteinaUpdateArgs>(args: SelectSubset<T, proteinaUpdateArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Proteinas.
     * @param {proteinaDeleteManyArgs} args - Arguments to filter Proteinas to delete.
     * @example
     * // Delete a few Proteinas
     * const { count } = await prisma.proteina.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends proteinaDeleteManyArgs>(args?: SelectSubset<T, proteinaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proteinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {proteinaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proteinas
     * const proteina = await prisma.proteina.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends proteinaUpdateManyArgs>(args: SelectSubset<T, proteinaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proteina.
     * @param {proteinaUpsertArgs} args - Arguments to update or create a Proteina.
     * @example
     * // Update or create a Proteina
     * const proteina = await prisma.proteina.upsert({
     *   create: {
     *     // ... data to create a Proteina
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proteina we want to update
     *   }
     * })
     */
    upsert<T extends proteinaUpsertArgs>(args: SelectSubset<T, proteinaUpsertArgs<ExtArgs>>): Prisma__proteinaClient<$Result.GetResult<Prisma.$proteinaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Proteinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {proteinaCountArgs} args - Arguments to filter Proteinas to count.
     * @example
     * // Count the number of Proteinas
     * const count = await prisma.proteina.count({
     *   where: {
     *     // ... the filter for the Proteinas we want to count
     *   }
     * })
    **/
    count<T extends proteinaCountArgs>(
      args?: Subset<T, proteinaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProteinaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proteina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProteinaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProteinaAggregateArgs>(args: Subset<T, ProteinaAggregateArgs>): Prisma.PrismaPromise<GetProteinaAggregateType<T>>

    /**
     * Group by Proteina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {proteinaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends proteinaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: proteinaGroupByArgs['orderBy'] }
        : { orderBy?: proteinaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, proteinaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProteinaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the proteina model
   */
  readonly fields: proteinaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for proteina.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__proteinaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the proteina model
   */
  interface proteinaFieldRefs {
    readonly Alimento: FieldRef<"proteina", 'String'>
    readonly Quantidade__g_: FieldRef<"proteina", 'Int'>
    readonly Energia__Kcal_: FieldRef<"proteina", 'Int'>
    readonly id: FieldRef<"proteina", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * proteina findUnique
   */
  export type proteinaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * Filter, which proteina to fetch.
     */
    where: proteinaWhereUniqueInput
  }

  /**
   * proteina findUniqueOrThrow
   */
  export type proteinaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * Filter, which proteina to fetch.
     */
    where: proteinaWhereUniqueInput
  }

  /**
   * proteina findFirst
   */
  export type proteinaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * Filter, which proteina to fetch.
     */
    where?: proteinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of proteinas to fetch.
     */
    orderBy?: proteinaOrderByWithRelationInput | proteinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for proteinas.
     */
    cursor?: proteinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` proteinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` proteinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of proteinas.
     */
    distinct?: ProteinaScalarFieldEnum | ProteinaScalarFieldEnum[]
  }

  /**
   * proteina findFirstOrThrow
   */
  export type proteinaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * Filter, which proteina to fetch.
     */
    where?: proteinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of proteinas to fetch.
     */
    orderBy?: proteinaOrderByWithRelationInput | proteinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for proteinas.
     */
    cursor?: proteinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` proteinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` proteinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of proteinas.
     */
    distinct?: ProteinaScalarFieldEnum | ProteinaScalarFieldEnum[]
  }

  /**
   * proteina findMany
   */
  export type proteinaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * Filter, which proteinas to fetch.
     */
    where?: proteinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of proteinas to fetch.
     */
    orderBy?: proteinaOrderByWithRelationInput | proteinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing proteinas.
     */
    cursor?: proteinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` proteinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` proteinas.
     */
    skip?: number
    distinct?: ProteinaScalarFieldEnum | ProteinaScalarFieldEnum[]
  }

  /**
   * proteina create
   */
  export type proteinaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * The data needed to create a proteina.
     */
    data?: XOR<proteinaCreateInput, proteinaUncheckedCreateInput>
  }

  /**
   * proteina createMany
   */
  export type proteinaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many proteinas.
     */
    data: proteinaCreateManyInput | proteinaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * proteina update
   */
  export type proteinaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * The data needed to update a proteina.
     */
    data: XOR<proteinaUpdateInput, proteinaUncheckedUpdateInput>
    /**
     * Choose, which proteina to update.
     */
    where: proteinaWhereUniqueInput
  }

  /**
   * proteina updateMany
   */
  export type proteinaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update proteinas.
     */
    data: XOR<proteinaUpdateManyMutationInput, proteinaUncheckedUpdateManyInput>
    /**
     * Filter which proteinas to update
     */
    where?: proteinaWhereInput
    /**
     * Limit how many proteinas to update.
     */
    limit?: number
  }

  /**
   * proteina upsert
   */
  export type proteinaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * The filter to search for the proteina to update in case it exists.
     */
    where: proteinaWhereUniqueInput
    /**
     * In case the proteina found by the `where` argument doesn't exist, create a new proteina with this data.
     */
    create: XOR<proteinaCreateInput, proteinaUncheckedCreateInput>
    /**
     * In case the proteina was found with the provided `where` argument, update it with this data.
     */
    update: XOR<proteinaUpdateInput, proteinaUncheckedUpdateInput>
  }

  /**
   * proteina delete
   */
  export type proteinaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
    /**
     * Filter which proteina to delete.
     */
    where: proteinaWhereUniqueInput
  }

  /**
   * proteina deleteMany
   */
  export type proteinaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which proteinas to delete
     */
    where?: proteinaWhereInput
    /**
     * Limit how many proteinas to delete.
     */
    limit?: number
  }

  /**
   * proteina without action
   */
  export type proteinaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the proteina
     */
    select?: proteinaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the proteina
     */
    omit?: proteinaOmit<ExtArgs> | null
  }


  /**
   * Model Alimentos
   */

  export type AggregateAlimentos = {
    _count: AlimentosCountAggregateOutputType | null
    _avg: AlimentosAvgAggregateOutputType | null
    _sum: AlimentosSumAggregateOutputType | null
    _min: AlimentosMinAggregateOutputType | null
    _max: AlimentosMaxAggregateOutputType | null
  }

  export type AlimentosAvgAggregateOutputType = {
    id: number | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
  }

  export type AlimentosSumAggregateOutputType = {
    id: number | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
  }

  export type AlimentosMinAggregateOutputType = {
    id: number | null
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
  }

  export type AlimentosMaxAggregateOutputType = {
    id: number | null
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
  }

  export type AlimentosCountAggregateOutputType = {
    id: number
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    _all: number
  }


  export type AlimentosAvgAggregateInputType = {
    id?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
  }

  export type AlimentosSumAggregateInputType = {
    id?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
  }

  export type AlimentosMinAggregateInputType = {
    id?: true
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
  }

  export type AlimentosMaxAggregateInputType = {
    id?: true
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
  }

  export type AlimentosCountAggregateInputType = {
    id?: true
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    _all?: true
  }

  export type AlimentosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alimentos to aggregate.
     */
    where?: AlimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentos to fetch.
     */
    orderBy?: AlimentosOrderByWithRelationInput | AlimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alimentos
    **/
    _count?: true | AlimentosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlimentosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlimentosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlimentosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlimentosMaxAggregateInputType
  }

  export type GetAlimentosAggregateType<T extends AlimentosAggregateArgs> = {
        [P in keyof T & keyof AggregateAlimentos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlimentos[P]>
      : GetScalarType<T[P], AggregateAlimentos[P]>
  }




  export type AlimentosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlimentosWhereInput
    orderBy?: AlimentosOrderByWithAggregationInput | AlimentosOrderByWithAggregationInput[]
    by: AlimentosScalarFieldEnum[] | AlimentosScalarFieldEnum
    having?: AlimentosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlimentosCountAggregateInputType | true
    _avg?: AlimentosAvgAggregateInputType
    _sum?: AlimentosSumAggregateInputType
    _min?: AlimentosMinAggregateInputType
    _max?: AlimentosMaxAggregateInputType
  }

  export type AlimentosGroupByOutputType = {
    id: number
    Alimento: string
    Quantidade__g_: number
    Energia__Kcal_: number
    _count: AlimentosCountAggregateOutputType | null
    _avg: AlimentosAvgAggregateOutputType | null
    _sum: AlimentosSumAggregateOutputType | null
    _min: AlimentosMinAggregateOutputType | null
    _max: AlimentosMaxAggregateOutputType | null
  }

  type GetAlimentosGroupByPayload<T extends AlimentosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlimentosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlimentosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlimentosGroupByOutputType[P]>
            : GetScalarType<T[P], AlimentosGroupByOutputType[P]>
        }
      >
    >


  export type AlimentosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
  }, ExtArgs["result"]["alimentos"]>



  export type AlimentosSelectScalar = {
    id?: boolean
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
  }

  export type AlimentosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Alimento" | "Quantidade__g_" | "Energia__Kcal_", ExtArgs["result"]["alimentos"]>

  export type $AlimentosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alimentos"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Alimento: string
      Quantidade__g_: number
      Energia__Kcal_: number
    }, ExtArgs["result"]["alimentos"]>
    composites: {}
  }

  type AlimentosGetPayload<S extends boolean | null | undefined | AlimentosDefaultArgs> = $Result.GetResult<Prisma.$AlimentosPayload, S>

  type AlimentosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlimentosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlimentosCountAggregateInputType | true
    }

  export interface AlimentosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alimentos'], meta: { name: 'Alimentos' } }
    /**
     * Find zero or one Alimentos that matches the filter.
     * @param {AlimentosFindUniqueArgs} args - Arguments to find a Alimentos
     * @example
     * // Get one Alimentos
     * const alimentos = await prisma.alimentos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlimentosFindUniqueArgs>(args: SelectSubset<T, AlimentosFindUniqueArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alimentos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlimentosFindUniqueOrThrowArgs} args - Arguments to find a Alimentos
     * @example
     * // Get one Alimentos
     * const alimentos = await prisma.alimentos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlimentosFindUniqueOrThrowArgs>(args: SelectSubset<T, AlimentosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentosFindFirstArgs} args - Arguments to find a Alimentos
     * @example
     * // Get one Alimentos
     * const alimentos = await prisma.alimentos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlimentosFindFirstArgs>(args?: SelectSubset<T, AlimentosFindFirstArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alimentos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentosFindFirstOrThrowArgs} args - Arguments to find a Alimentos
     * @example
     * // Get one Alimentos
     * const alimentos = await prisma.alimentos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlimentosFindFirstOrThrowArgs>(args?: SelectSubset<T, AlimentosFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alimentos
     * const alimentos = await prisma.alimentos.findMany()
     * 
     * // Get first 10 Alimentos
     * const alimentos = await prisma.alimentos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alimentosWithIdOnly = await prisma.alimentos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlimentosFindManyArgs>(args?: SelectSubset<T, AlimentosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alimentos.
     * @param {AlimentosCreateArgs} args - Arguments to create a Alimentos.
     * @example
     * // Create one Alimentos
     * const Alimentos = await prisma.alimentos.create({
     *   data: {
     *     // ... data to create a Alimentos
     *   }
     * })
     * 
     */
    create<T extends AlimentosCreateArgs>(args: SelectSubset<T, AlimentosCreateArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alimentos.
     * @param {AlimentosCreateManyArgs} args - Arguments to create many Alimentos.
     * @example
     * // Create many Alimentos
     * const alimentos = await prisma.alimentos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlimentosCreateManyArgs>(args?: SelectSubset<T, AlimentosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alimentos.
     * @param {AlimentosDeleteArgs} args - Arguments to delete one Alimentos.
     * @example
     * // Delete one Alimentos
     * const Alimentos = await prisma.alimentos.delete({
     *   where: {
     *     // ... filter to delete one Alimentos
     *   }
     * })
     * 
     */
    delete<T extends AlimentosDeleteArgs>(args: SelectSubset<T, AlimentosDeleteArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alimentos.
     * @param {AlimentosUpdateArgs} args - Arguments to update one Alimentos.
     * @example
     * // Update one Alimentos
     * const alimentos = await prisma.alimentos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlimentosUpdateArgs>(args: SelectSubset<T, AlimentosUpdateArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alimentos.
     * @param {AlimentosDeleteManyArgs} args - Arguments to filter Alimentos to delete.
     * @example
     * // Delete a few Alimentos
     * const { count } = await prisma.alimentos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlimentosDeleteManyArgs>(args?: SelectSubset<T, AlimentosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alimentos
     * const alimentos = await prisma.alimentos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlimentosUpdateManyArgs>(args: SelectSubset<T, AlimentosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alimentos.
     * @param {AlimentosUpsertArgs} args - Arguments to update or create a Alimentos.
     * @example
     * // Update or create a Alimentos
     * const alimentos = await prisma.alimentos.upsert({
     *   create: {
     *     // ... data to create a Alimentos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alimentos we want to update
     *   }
     * })
     */
    upsert<T extends AlimentosUpsertArgs>(args: SelectSubset<T, AlimentosUpsertArgs<ExtArgs>>): Prisma__AlimentosClient<$Result.GetResult<Prisma.$AlimentosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentosCountArgs} args - Arguments to filter Alimentos to count.
     * @example
     * // Count the number of Alimentos
     * const count = await prisma.alimentos.count({
     *   where: {
     *     // ... the filter for the Alimentos we want to count
     *   }
     * })
    **/
    count<T extends AlimentosCountArgs>(
      args?: Subset<T, AlimentosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlimentosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlimentosAggregateArgs>(args: Subset<T, AlimentosAggregateArgs>): Prisma.PrismaPromise<GetAlimentosAggregateType<T>>

    /**
     * Group by Alimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlimentosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlimentosGroupByArgs['orderBy'] }
        : { orderBy?: AlimentosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlimentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlimentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alimentos model
   */
  readonly fields: AlimentosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alimentos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlimentosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alimentos model
   */
  interface AlimentosFieldRefs {
    readonly id: FieldRef<"Alimentos", 'Int'>
    readonly Alimento: FieldRef<"Alimentos", 'String'>
    readonly Quantidade__g_: FieldRef<"Alimentos", 'Int'>
    readonly Energia__Kcal_: FieldRef<"Alimentos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Alimentos findUnique
   */
  export type AlimentosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * Filter, which Alimentos to fetch.
     */
    where: AlimentosWhereUniqueInput
  }

  /**
   * Alimentos findUniqueOrThrow
   */
  export type AlimentosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * Filter, which Alimentos to fetch.
     */
    where: AlimentosWhereUniqueInput
  }

  /**
   * Alimentos findFirst
   */
  export type AlimentosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * Filter, which Alimentos to fetch.
     */
    where?: AlimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentos to fetch.
     */
    orderBy?: AlimentosOrderByWithRelationInput | AlimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alimentos.
     */
    cursor?: AlimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alimentos.
     */
    distinct?: AlimentosScalarFieldEnum | AlimentosScalarFieldEnum[]
  }

  /**
   * Alimentos findFirstOrThrow
   */
  export type AlimentosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * Filter, which Alimentos to fetch.
     */
    where?: AlimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentos to fetch.
     */
    orderBy?: AlimentosOrderByWithRelationInput | AlimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alimentos.
     */
    cursor?: AlimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alimentos.
     */
    distinct?: AlimentosScalarFieldEnum | AlimentosScalarFieldEnum[]
  }

  /**
   * Alimentos findMany
   */
  export type AlimentosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * Filter, which Alimentos to fetch.
     */
    where?: AlimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alimentos to fetch.
     */
    orderBy?: AlimentosOrderByWithRelationInput | AlimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alimentos.
     */
    cursor?: AlimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alimentos.
     */
    skip?: number
    distinct?: AlimentosScalarFieldEnum | AlimentosScalarFieldEnum[]
  }

  /**
   * Alimentos create
   */
  export type AlimentosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * The data needed to create a Alimentos.
     */
    data: XOR<AlimentosCreateInput, AlimentosUncheckedCreateInput>
  }

  /**
   * Alimentos createMany
   */
  export type AlimentosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alimentos.
     */
    data: AlimentosCreateManyInput | AlimentosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alimentos update
   */
  export type AlimentosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * The data needed to update a Alimentos.
     */
    data: XOR<AlimentosUpdateInput, AlimentosUncheckedUpdateInput>
    /**
     * Choose, which Alimentos to update.
     */
    where: AlimentosWhereUniqueInput
  }

  /**
   * Alimentos updateMany
   */
  export type AlimentosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alimentos.
     */
    data: XOR<AlimentosUpdateManyMutationInput, AlimentosUncheckedUpdateManyInput>
    /**
     * Filter which Alimentos to update
     */
    where?: AlimentosWhereInput
    /**
     * Limit how many Alimentos to update.
     */
    limit?: number
  }

  /**
   * Alimentos upsert
   */
  export type AlimentosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * The filter to search for the Alimentos to update in case it exists.
     */
    where: AlimentosWhereUniqueInput
    /**
     * In case the Alimentos found by the `where` argument doesn't exist, create a new Alimentos with this data.
     */
    create: XOR<AlimentosCreateInput, AlimentosUncheckedCreateInput>
    /**
     * In case the Alimentos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlimentosUpdateInput, AlimentosUncheckedUpdateInput>
  }

  /**
   * Alimentos delete
   */
  export type AlimentosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
    /**
     * Filter which Alimentos to delete.
     */
    where: AlimentosWhereUniqueInput
  }

  /**
   * Alimentos deleteMany
   */
  export type AlimentosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alimentos to delete
     */
    where?: AlimentosWhereInput
    /**
     * Limit how many Alimentos to delete.
     */
    limit?: number
  }

  /**
   * Alimentos without action
   */
  export type AlimentosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alimentos
     */
    select?: AlimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alimentos
     */
    omit?: AlimentosOmit<ExtArgs> | null
  }


  /**
   * Model frutas
   */

  export type AggregateFrutas = {
    _count: FrutasCountAggregateOutputType | null
    _avg: FrutasAvgAggregateOutputType | null
    _sum: FrutasSumAggregateOutputType | null
    _min: FrutasMinAggregateOutputType | null
    _max: FrutasMaxAggregateOutputType | null
  }

  export type FrutasAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type FrutasSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type FrutasMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type FrutasMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type FrutasCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type FrutasAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type FrutasSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type FrutasMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type FrutasMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type FrutasCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type FrutasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which frutas to aggregate.
     */
    where?: frutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frutas to fetch.
     */
    orderBy?: frutasOrderByWithRelationInput | frutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: frutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned frutas
    **/
    _count?: true | FrutasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrutasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrutasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrutasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrutasMaxAggregateInputType
  }

  export type GetFrutasAggregateType<T extends FrutasAggregateArgs> = {
        [P in keyof T & keyof AggregateFrutas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrutas[P]>
      : GetScalarType<T[P], AggregateFrutas[P]>
  }




  export type frutasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: frutasWhereInput
    orderBy?: frutasOrderByWithAggregationInput | frutasOrderByWithAggregationInput[]
    by: FrutasScalarFieldEnum[] | FrutasScalarFieldEnum
    having?: frutasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrutasCountAggregateInputType | true
    _avg?: FrutasAvgAggregateInputType
    _sum?: FrutasSumAggregateInputType
    _min?: FrutasMinAggregateInputType
    _max?: FrutasMaxAggregateInputType
  }

  export type FrutasGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: FrutasCountAggregateOutputType | null
    _avg: FrutasAvgAggregateOutputType | null
    _sum: FrutasSumAggregateOutputType | null
    _min: FrutasMinAggregateOutputType | null
    _max: FrutasMaxAggregateOutputType | null
  }

  type GetFrutasGroupByPayload<T extends frutasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrutasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrutasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrutasGroupByOutputType[P]>
            : GetScalarType<T[P], FrutasGroupByOutputType[P]>
        }
      >
    >


  export type frutasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["frutas"]>



  export type frutasSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type frutasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["frutas"]>

  export type $frutasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "frutas"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["frutas"]>
    composites: {}
  }

  type frutasGetPayload<S extends boolean | null | undefined | frutasDefaultArgs> = $Result.GetResult<Prisma.$frutasPayload, S>

  type frutasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<frutasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FrutasCountAggregateInputType | true
    }

  export interface frutasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['frutas'], meta: { name: 'frutas' } }
    /**
     * Find zero or one Frutas that matches the filter.
     * @param {frutasFindUniqueArgs} args - Arguments to find a Frutas
     * @example
     * // Get one Frutas
     * const frutas = await prisma.frutas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends frutasFindUniqueArgs>(args: SelectSubset<T, frutasFindUniqueArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Frutas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {frutasFindUniqueOrThrowArgs} args - Arguments to find a Frutas
     * @example
     * // Get one Frutas
     * const frutas = await prisma.frutas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends frutasFindUniqueOrThrowArgs>(args: SelectSubset<T, frutasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Frutas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frutasFindFirstArgs} args - Arguments to find a Frutas
     * @example
     * // Get one Frutas
     * const frutas = await prisma.frutas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends frutasFindFirstArgs>(args?: SelectSubset<T, frutasFindFirstArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Frutas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frutasFindFirstOrThrowArgs} args - Arguments to find a Frutas
     * @example
     * // Get one Frutas
     * const frutas = await prisma.frutas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends frutasFindFirstOrThrowArgs>(args?: SelectSubset<T, frutasFindFirstOrThrowArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Frutas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frutasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Frutas
     * const frutas = await prisma.frutas.findMany()
     * 
     * // Get first 10 Frutas
     * const frutas = await prisma.frutas.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const frutasWithAlimentoOnly = await prisma.frutas.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends frutasFindManyArgs>(args?: SelectSubset<T, frutasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Frutas.
     * @param {frutasCreateArgs} args - Arguments to create a Frutas.
     * @example
     * // Create one Frutas
     * const Frutas = await prisma.frutas.create({
     *   data: {
     *     // ... data to create a Frutas
     *   }
     * })
     * 
     */
    create<T extends frutasCreateArgs>(args: SelectSubset<T, frutasCreateArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Frutas.
     * @param {frutasCreateManyArgs} args - Arguments to create many Frutas.
     * @example
     * // Create many Frutas
     * const frutas = await prisma.frutas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends frutasCreateManyArgs>(args?: SelectSubset<T, frutasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Frutas.
     * @param {frutasDeleteArgs} args - Arguments to delete one Frutas.
     * @example
     * // Delete one Frutas
     * const Frutas = await prisma.frutas.delete({
     *   where: {
     *     // ... filter to delete one Frutas
     *   }
     * })
     * 
     */
    delete<T extends frutasDeleteArgs>(args: SelectSubset<T, frutasDeleteArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Frutas.
     * @param {frutasUpdateArgs} args - Arguments to update one Frutas.
     * @example
     * // Update one Frutas
     * const frutas = await prisma.frutas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends frutasUpdateArgs>(args: SelectSubset<T, frutasUpdateArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Frutas.
     * @param {frutasDeleteManyArgs} args - Arguments to filter Frutas to delete.
     * @example
     * // Delete a few Frutas
     * const { count } = await prisma.frutas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends frutasDeleteManyArgs>(args?: SelectSubset<T, frutasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Frutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frutasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Frutas
     * const frutas = await prisma.frutas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends frutasUpdateManyArgs>(args: SelectSubset<T, frutasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Frutas.
     * @param {frutasUpsertArgs} args - Arguments to update or create a Frutas.
     * @example
     * // Update or create a Frutas
     * const frutas = await prisma.frutas.upsert({
     *   create: {
     *     // ... data to create a Frutas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Frutas we want to update
     *   }
     * })
     */
    upsert<T extends frutasUpsertArgs>(args: SelectSubset<T, frutasUpsertArgs<ExtArgs>>): Prisma__frutasClient<$Result.GetResult<Prisma.$frutasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Frutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frutasCountArgs} args - Arguments to filter Frutas to count.
     * @example
     * // Count the number of Frutas
     * const count = await prisma.frutas.count({
     *   where: {
     *     // ... the filter for the Frutas we want to count
     *   }
     * })
    **/
    count<T extends frutasCountArgs>(
      args?: Subset<T, frutasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrutasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Frutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrutasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrutasAggregateArgs>(args: Subset<T, FrutasAggregateArgs>): Prisma.PrismaPromise<GetFrutasAggregateType<T>>

    /**
     * Group by Frutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frutasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends frutasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: frutasGroupByArgs['orderBy'] }
        : { orderBy?: frutasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, frutasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrutasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the frutas model
   */
  readonly fields: frutasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for frutas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__frutasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the frutas model
   */
  interface frutasFieldRefs {
    readonly Alimento: FieldRef<"frutas", 'String'>
    readonly Quantidade__g_: FieldRef<"frutas", 'Int'>
    readonly Energia__Kcal_: FieldRef<"frutas", 'Int'>
    readonly id: FieldRef<"frutas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * frutas findUnique
   */
  export type frutasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * Filter, which frutas to fetch.
     */
    where: frutasWhereUniqueInput
  }

  /**
   * frutas findUniqueOrThrow
   */
  export type frutasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * Filter, which frutas to fetch.
     */
    where: frutasWhereUniqueInput
  }

  /**
   * frutas findFirst
   */
  export type frutasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * Filter, which frutas to fetch.
     */
    where?: frutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frutas to fetch.
     */
    orderBy?: frutasOrderByWithRelationInput | frutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for frutas.
     */
    cursor?: frutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of frutas.
     */
    distinct?: FrutasScalarFieldEnum | FrutasScalarFieldEnum[]
  }

  /**
   * frutas findFirstOrThrow
   */
  export type frutasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * Filter, which frutas to fetch.
     */
    where?: frutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frutas to fetch.
     */
    orderBy?: frutasOrderByWithRelationInput | frutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for frutas.
     */
    cursor?: frutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of frutas.
     */
    distinct?: FrutasScalarFieldEnum | FrutasScalarFieldEnum[]
  }

  /**
   * frutas findMany
   */
  export type frutasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * Filter, which frutas to fetch.
     */
    where?: frutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frutas to fetch.
     */
    orderBy?: frutasOrderByWithRelationInput | frutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing frutas.
     */
    cursor?: frutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frutas.
     */
    skip?: number
    distinct?: FrutasScalarFieldEnum | FrutasScalarFieldEnum[]
  }

  /**
   * frutas create
   */
  export type frutasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * The data needed to create a frutas.
     */
    data?: XOR<frutasCreateInput, frutasUncheckedCreateInput>
  }

  /**
   * frutas createMany
   */
  export type frutasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many frutas.
     */
    data: frutasCreateManyInput | frutasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * frutas update
   */
  export type frutasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * The data needed to update a frutas.
     */
    data: XOR<frutasUpdateInput, frutasUncheckedUpdateInput>
    /**
     * Choose, which frutas to update.
     */
    where: frutasWhereUniqueInput
  }

  /**
   * frutas updateMany
   */
  export type frutasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update frutas.
     */
    data: XOR<frutasUpdateManyMutationInput, frutasUncheckedUpdateManyInput>
    /**
     * Filter which frutas to update
     */
    where?: frutasWhereInput
    /**
     * Limit how many frutas to update.
     */
    limit?: number
  }

  /**
   * frutas upsert
   */
  export type frutasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * The filter to search for the frutas to update in case it exists.
     */
    where: frutasWhereUniqueInput
    /**
     * In case the frutas found by the `where` argument doesn't exist, create a new frutas with this data.
     */
    create: XOR<frutasCreateInput, frutasUncheckedCreateInput>
    /**
     * In case the frutas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<frutasUpdateInput, frutasUncheckedUpdateInput>
  }

  /**
   * frutas delete
   */
  export type frutasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
    /**
     * Filter which frutas to delete.
     */
    where: frutasWhereUniqueInput
  }

  /**
   * frutas deleteMany
   */
  export type frutasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which frutas to delete
     */
    where?: frutasWhereInput
    /**
     * Limit how many frutas to delete.
     */
    limit?: number
  }

  /**
   * frutas without action
   */
  export type frutasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frutas
     */
    select?: frutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the frutas
     */
    omit?: frutasOmit<ExtArgs> | null
  }


  /**
   * Model sementes
   */

  export type AggregateSementes = {
    _count: SementesCountAggregateOutputType | null
    _avg: SementesAvgAggregateOutputType | null
    _sum: SementesSumAggregateOutputType | null
    _min: SementesMinAggregateOutputType | null
    _max: SementesMaxAggregateOutputType | null
  }

  export type SementesAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type SementesSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type SementesMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type SementesMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type SementesCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type SementesAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type SementesSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type SementesMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type SementesMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type SementesCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type SementesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sementes to aggregate.
     */
    where?: sementesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sementes to fetch.
     */
    orderBy?: sementesOrderByWithRelationInput | sementesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sementesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sementes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sementes
    **/
    _count?: true | SementesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SementesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SementesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SementesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SementesMaxAggregateInputType
  }

  export type GetSementesAggregateType<T extends SementesAggregateArgs> = {
        [P in keyof T & keyof AggregateSementes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSementes[P]>
      : GetScalarType<T[P], AggregateSementes[P]>
  }




  export type sementesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sementesWhereInput
    orderBy?: sementesOrderByWithAggregationInput | sementesOrderByWithAggregationInput[]
    by: SementesScalarFieldEnum[] | SementesScalarFieldEnum
    having?: sementesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SementesCountAggregateInputType | true
    _avg?: SementesAvgAggregateInputType
    _sum?: SementesSumAggregateInputType
    _min?: SementesMinAggregateInputType
    _max?: SementesMaxAggregateInputType
  }

  export type SementesGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: SementesCountAggregateOutputType | null
    _avg: SementesAvgAggregateOutputType | null
    _sum: SementesSumAggregateOutputType | null
    _min: SementesMinAggregateOutputType | null
    _max: SementesMaxAggregateOutputType | null
  }

  type GetSementesGroupByPayload<T extends sementesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SementesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SementesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SementesGroupByOutputType[P]>
            : GetScalarType<T[P], SementesGroupByOutputType[P]>
        }
      >
    >


  export type sementesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["sementes"]>



  export type sementesSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type sementesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["sementes"]>

  export type $sementesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sementes"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["sementes"]>
    composites: {}
  }

  type sementesGetPayload<S extends boolean | null | undefined | sementesDefaultArgs> = $Result.GetResult<Prisma.$sementesPayload, S>

  type sementesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sementesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SementesCountAggregateInputType | true
    }

  export interface sementesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sementes'], meta: { name: 'sementes' } }
    /**
     * Find zero or one Sementes that matches the filter.
     * @param {sementesFindUniqueArgs} args - Arguments to find a Sementes
     * @example
     * // Get one Sementes
     * const sementes = await prisma.sementes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sementesFindUniqueArgs>(args: SelectSubset<T, sementesFindUniqueArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sementes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sementesFindUniqueOrThrowArgs} args - Arguments to find a Sementes
     * @example
     * // Get one Sementes
     * const sementes = await prisma.sementes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sementesFindUniqueOrThrowArgs>(args: SelectSubset<T, sementesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sementes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sementesFindFirstArgs} args - Arguments to find a Sementes
     * @example
     * // Get one Sementes
     * const sementes = await prisma.sementes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sementesFindFirstArgs>(args?: SelectSubset<T, sementesFindFirstArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sementes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sementesFindFirstOrThrowArgs} args - Arguments to find a Sementes
     * @example
     * // Get one Sementes
     * const sementes = await prisma.sementes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sementesFindFirstOrThrowArgs>(args?: SelectSubset<T, sementesFindFirstOrThrowArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sementes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sementesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sementes
     * const sementes = await prisma.sementes.findMany()
     * 
     * // Get first 10 Sementes
     * const sementes = await prisma.sementes.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const sementesWithAlimentoOnly = await prisma.sementes.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends sementesFindManyArgs>(args?: SelectSubset<T, sementesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sementes.
     * @param {sementesCreateArgs} args - Arguments to create a Sementes.
     * @example
     * // Create one Sementes
     * const Sementes = await prisma.sementes.create({
     *   data: {
     *     // ... data to create a Sementes
     *   }
     * })
     * 
     */
    create<T extends sementesCreateArgs>(args: SelectSubset<T, sementesCreateArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sementes.
     * @param {sementesCreateManyArgs} args - Arguments to create many Sementes.
     * @example
     * // Create many Sementes
     * const sementes = await prisma.sementes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sementesCreateManyArgs>(args?: SelectSubset<T, sementesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sementes.
     * @param {sementesDeleteArgs} args - Arguments to delete one Sementes.
     * @example
     * // Delete one Sementes
     * const Sementes = await prisma.sementes.delete({
     *   where: {
     *     // ... filter to delete one Sementes
     *   }
     * })
     * 
     */
    delete<T extends sementesDeleteArgs>(args: SelectSubset<T, sementesDeleteArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sementes.
     * @param {sementesUpdateArgs} args - Arguments to update one Sementes.
     * @example
     * // Update one Sementes
     * const sementes = await prisma.sementes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sementesUpdateArgs>(args: SelectSubset<T, sementesUpdateArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sementes.
     * @param {sementesDeleteManyArgs} args - Arguments to filter Sementes to delete.
     * @example
     * // Delete a few Sementes
     * const { count } = await prisma.sementes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sementesDeleteManyArgs>(args?: SelectSubset<T, sementesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sementes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sementesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sementes
     * const sementes = await prisma.sementes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sementesUpdateManyArgs>(args: SelectSubset<T, sementesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sementes.
     * @param {sementesUpsertArgs} args - Arguments to update or create a Sementes.
     * @example
     * // Update or create a Sementes
     * const sementes = await prisma.sementes.upsert({
     *   create: {
     *     // ... data to create a Sementes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sementes we want to update
     *   }
     * })
     */
    upsert<T extends sementesUpsertArgs>(args: SelectSubset<T, sementesUpsertArgs<ExtArgs>>): Prisma__sementesClient<$Result.GetResult<Prisma.$sementesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sementes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sementesCountArgs} args - Arguments to filter Sementes to count.
     * @example
     * // Count the number of Sementes
     * const count = await prisma.sementes.count({
     *   where: {
     *     // ... the filter for the Sementes we want to count
     *   }
     * })
    **/
    count<T extends sementesCountArgs>(
      args?: Subset<T, sementesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SementesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sementes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SementesAggregateArgs>(args: Subset<T, SementesAggregateArgs>): Prisma.PrismaPromise<GetSementesAggregateType<T>>

    /**
     * Group by Sementes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sementesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sementesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sementesGroupByArgs['orderBy'] }
        : { orderBy?: sementesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sementesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSementesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sementes model
   */
  readonly fields: sementesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sementes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sementesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sementes model
   */
  interface sementesFieldRefs {
    readonly Alimento: FieldRef<"sementes", 'String'>
    readonly Quantidade__g_: FieldRef<"sementes", 'Int'>
    readonly Energia__Kcal_: FieldRef<"sementes", 'Int'>
    readonly id: FieldRef<"sementes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * sementes findUnique
   */
  export type sementesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * Filter, which sementes to fetch.
     */
    where: sementesWhereUniqueInput
  }

  /**
   * sementes findUniqueOrThrow
   */
  export type sementesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * Filter, which sementes to fetch.
     */
    where: sementesWhereUniqueInput
  }

  /**
   * sementes findFirst
   */
  export type sementesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * Filter, which sementes to fetch.
     */
    where?: sementesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sementes to fetch.
     */
    orderBy?: sementesOrderByWithRelationInput | sementesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sementes.
     */
    cursor?: sementesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sementes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sementes.
     */
    distinct?: SementesScalarFieldEnum | SementesScalarFieldEnum[]
  }

  /**
   * sementes findFirstOrThrow
   */
  export type sementesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * Filter, which sementes to fetch.
     */
    where?: sementesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sementes to fetch.
     */
    orderBy?: sementesOrderByWithRelationInput | sementesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sementes.
     */
    cursor?: sementesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sementes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sementes.
     */
    distinct?: SementesScalarFieldEnum | SementesScalarFieldEnum[]
  }

  /**
   * sementes findMany
   */
  export type sementesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * Filter, which sementes to fetch.
     */
    where?: sementesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sementes to fetch.
     */
    orderBy?: sementesOrderByWithRelationInput | sementesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sementes.
     */
    cursor?: sementesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sementes.
     */
    skip?: number
    distinct?: SementesScalarFieldEnum | SementesScalarFieldEnum[]
  }

  /**
   * sementes create
   */
  export type sementesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * The data needed to create a sementes.
     */
    data?: XOR<sementesCreateInput, sementesUncheckedCreateInput>
  }

  /**
   * sementes createMany
   */
  export type sementesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sementes.
     */
    data: sementesCreateManyInput | sementesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sementes update
   */
  export type sementesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * The data needed to update a sementes.
     */
    data: XOR<sementesUpdateInput, sementesUncheckedUpdateInput>
    /**
     * Choose, which sementes to update.
     */
    where: sementesWhereUniqueInput
  }

  /**
   * sementes updateMany
   */
  export type sementesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sementes.
     */
    data: XOR<sementesUpdateManyMutationInput, sementesUncheckedUpdateManyInput>
    /**
     * Filter which sementes to update
     */
    where?: sementesWhereInput
    /**
     * Limit how many sementes to update.
     */
    limit?: number
  }

  /**
   * sementes upsert
   */
  export type sementesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * The filter to search for the sementes to update in case it exists.
     */
    where: sementesWhereUniqueInput
    /**
     * In case the sementes found by the `where` argument doesn't exist, create a new sementes with this data.
     */
    create: XOR<sementesCreateInput, sementesUncheckedCreateInput>
    /**
     * In case the sementes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sementesUpdateInput, sementesUncheckedUpdateInput>
  }

  /**
   * sementes delete
   */
  export type sementesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
    /**
     * Filter which sementes to delete.
     */
    where: sementesWhereUniqueInput
  }

  /**
   * sementes deleteMany
   */
  export type sementesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sementes to delete
     */
    where?: sementesWhereInput
    /**
     * Limit how many sementes to delete.
     */
    limit?: number
  }

  /**
   * sementes without action
   */
  export type sementesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sementes
     */
    select?: sementesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sementes
     */
    omit?: sementesOmit<ExtArgs> | null
  }


  /**
   * Model cereais_e_tuberculos
   */

  export type AggregateCereais_e_tuberculos = {
    _count: Cereais_e_tuberculosCountAggregateOutputType | null
    _avg: Cereais_e_tuberculosAvgAggregateOutputType | null
    _sum: Cereais_e_tuberculosSumAggregateOutputType | null
    _min: Cereais_e_tuberculosMinAggregateOutputType | null
    _max: Cereais_e_tuberculosMaxAggregateOutputType | null
  }

  export type Cereais_e_tuberculosAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Cereais_e_tuberculosSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Cereais_e_tuberculosMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Cereais_e_tuberculosMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Cereais_e_tuberculosCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type Cereais_e_tuberculosAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Cereais_e_tuberculosSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Cereais_e_tuberculosMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Cereais_e_tuberculosMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Cereais_e_tuberculosCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type Cereais_e_tuberculosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cereais_e_tuberculos to aggregate.
     */
    where?: cereais_e_tuberculosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cereais_e_tuberculos to fetch.
     */
    orderBy?: cereais_e_tuberculosOrderByWithRelationInput | cereais_e_tuberculosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cereais_e_tuberculosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cereais_e_tuberculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cereais_e_tuberculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cereais_e_tuberculos
    **/
    _count?: true | Cereais_e_tuberculosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cereais_e_tuberculosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cereais_e_tuberculosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cereais_e_tuberculosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cereais_e_tuberculosMaxAggregateInputType
  }

  export type GetCereais_e_tuberculosAggregateType<T extends Cereais_e_tuberculosAggregateArgs> = {
        [P in keyof T & keyof AggregateCereais_e_tuberculos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCereais_e_tuberculos[P]>
      : GetScalarType<T[P], AggregateCereais_e_tuberculos[P]>
  }




  export type cereais_e_tuberculosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cereais_e_tuberculosWhereInput
    orderBy?: cereais_e_tuberculosOrderByWithAggregationInput | cereais_e_tuberculosOrderByWithAggregationInput[]
    by: Cereais_e_tuberculosScalarFieldEnum[] | Cereais_e_tuberculosScalarFieldEnum
    having?: cereais_e_tuberculosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cereais_e_tuberculosCountAggregateInputType | true
    _avg?: Cereais_e_tuberculosAvgAggregateInputType
    _sum?: Cereais_e_tuberculosSumAggregateInputType
    _min?: Cereais_e_tuberculosMinAggregateInputType
    _max?: Cereais_e_tuberculosMaxAggregateInputType
  }

  export type Cereais_e_tuberculosGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: Cereais_e_tuberculosCountAggregateOutputType | null
    _avg: Cereais_e_tuberculosAvgAggregateOutputType | null
    _sum: Cereais_e_tuberculosSumAggregateOutputType | null
    _min: Cereais_e_tuberculosMinAggregateOutputType | null
    _max: Cereais_e_tuberculosMaxAggregateOutputType | null
  }

  type GetCereais_e_tuberculosGroupByPayload<T extends cereais_e_tuberculosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cereais_e_tuberculosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cereais_e_tuberculosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cereais_e_tuberculosGroupByOutputType[P]>
            : GetScalarType<T[P], Cereais_e_tuberculosGroupByOutputType[P]>
        }
      >
    >


  export type cereais_e_tuberculosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["cereais_e_tuberculos"]>



  export type cereais_e_tuberculosSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type cereais_e_tuberculosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["cereais_e_tuberculos"]>

  export type $cereais_e_tuberculosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cereais_e_tuberculos"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["cereais_e_tuberculos"]>
    composites: {}
  }

  type cereais_e_tuberculosGetPayload<S extends boolean | null | undefined | cereais_e_tuberculosDefaultArgs> = $Result.GetResult<Prisma.$cereais_e_tuberculosPayload, S>

  type cereais_e_tuberculosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<cereais_e_tuberculosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Cereais_e_tuberculosCountAggregateInputType | true
    }

  export interface cereais_e_tuberculosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cereais_e_tuberculos'], meta: { name: 'cereais_e_tuberculos' } }
    /**
     * Find zero or one Cereais_e_tuberculos that matches the filter.
     * @param {cereais_e_tuberculosFindUniqueArgs} args - Arguments to find a Cereais_e_tuberculos
     * @example
     * // Get one Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cereais_e_tuberculosFindUniqueArgs>(args: SelectSubset<T, cereais_e_tuberculosFindUniqueArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cereais_e_tuberculos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {cereais_e_tuberculosFindUniqueOrThrowArgs} args - Arguments to find a Cereais_e_tuberculos
     * @example
     * // Get one Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cereais_e_tuberculosFindUniqueOrThrowArgs>(args: SelectSubset<T, cereais_e_tuberculosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cereais_e_tuberculos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cereais_e_tuberculosFindFirstArgs} args - Arguments to find a Cereais_e_tuberculos
     * @example
     * // Get one Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cereais_e_tuberculosFindFirstArgs>(args?: SelectSubset<T, cereais_e_tuberculosFindFirstArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cereais_e_tuberculos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cereais_e_tuberculosFindFirstOrThrowArgs} args - Arguments to find a Cereais_e_tuberculos
     * @example
     * // Get one Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cereais_e_tuberculosFindFirstOrThrowArgs>(args?: SelectSubset<T, cereais_e_tuberculosFindFirstOrThrowArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cereais_e_tuberculos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cereais_e_tuberculosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.findMany()
     * 
     * // Get first 10 Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const cereais_e_tuberculosWithAlimentoOnly = await prisma.cereais_e_tuberculos.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends cereais_e_tuberculosFindManyArgs>(args?: SelectSubset<T, cereais_e_tuberculosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cereais_e_tuberculos.
     * @param {cereais_e_tuberculosCreateArgs} args - Arguments to create a Cereais_e_tuberculos.
     * @example
     * // Create one Cereais_e_tuberculos
     * const Cereais_e_tuberculos = await prisma.cereais_e_tuberculos.create({
     *   data: {
     *     // ... data to create a Cereais_e_tuberculos
     *   }
     * })
     * 
     */
    create<T extends cereais_e_tuberculosCreateArgs>(args: SelectSubset<T, cereais_e_tuberculosCreateArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cereais_e_tuberculos.
     * @param {cereais_e_tuberculosCreateManyArgs} args - Arguments to create many Cereais_e_tuberculos.
     * @example
     * // Create many Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cereais_e_tuberculosCreateManyArgs>(args?: SelectSubset<T, cereais_e_tuberculosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cereais_e_tuberculos.
     * @param {cereais_e_tuberculosDeleteArgs} args - Arguments to delete one Cereais_e_tuberculos.
     * @example
     * // Delete one Cereais_e_tuberculos
     * const Cereais_e_tuberculos = await prisma.cereais_e_tuberculos.delete({
     *   where: {
     *     // ... filter to delete one Cereais_e_tuberculos
     *   }
     * })
     * 
     */
    delete<T extends cereais_e_tuberculosDeleteArgs>(args: SelectSubset<T, cereais_e_tuberculosDeleteArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cereais_e_tuberculos.
     * @param {cereais_e_tuberculosUpdateArgs} args - Arguments to update one Cereais_e_tuberculos.
     * @example
     * // Update one Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cereais_e_tuberculosUpdateArgs>(args: SelectSubset<T, cereais_e_tuberculosUpdateArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cereais_e_tuberculos.
     * @param {cereais_e_tuberculosDeleteManyArgs} args - Arguments to filter Cereais_e_tuberculos to delete.
     * @example
     * // Delete a few Cereais_e_tuberculos
     * const { count } = await prisma.cereais_e_tuberculos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cereais_e_tuberculosDeleteManyArgs>(args?: SelectSubset<T, cereais_e_tuberculosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cereais_e_tuberculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cereais_e_tuberculosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cereais_e_tuberculosUpdateManyArgs>(args: SelectSubset<T, cereais_e_tuberculosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cereais_e_tuberculos.
     * @param {cereais_e_tuberculosUpsertArgs} args - Arguments to update or create a Cereais_e_tuberculos.
     * @example
     * // Update or create a Cereais_e_tuberculos
     * const cereais_e_tuberculos = await prisma.cereais_e_tuberculos.upsert({
     *   create: {
     *     // ... data to create a Cereais_e_tuberculos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cereais_e_tuberculos we want to update
     *   }
     * })
     */
    upsert<T extends cereais_e_tuberculosUpsertArgs>(args: SelectSubset<T, cereais_e_tuberculosUpsertArgs<ExtArgs>>): Prisma__cereais_e_tuberculosClient<$Result.GetResult<Prisma.$cereais_e_tuberculosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cereais_e_tuberculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cereais_e_tuberculosCountArgs} args - Arguments to filter Cereais_e_tuberculos to count.
     * @example
     * // Count the number of Cereais_e_tuberculos
     * const count = await prisma.cereais_e_tuberculos.count({
     *   where: {
     *     // ... the filter for the Cereais_e_tuberculos we want to count
     *   }
     * })
    **/
    count<T extends cereais_e_tuberculosCountArgs>(
      args?: Subset<T, cereais_e_tuberculosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cereais_e_tuberculosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cereais_e_tuberculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cereais_e_tuberculosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cereais_e_tuberculosAggregateArgs>(args: Subset<T, Cereais_e_tuberculosAggregateArgs>): Prisma.PrismaPromise<GetCereais_e_tuberculosAggregateType<T>>

    /**
     * Group by Cereais_e_tuberculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cereais_e_tuberculosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cereais_e_tuberculosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cereais_e_tuberculosGroupByArgs['orderBy'] }
        : { orderBy?: cereais_e_tuberculosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cereais_e_tuberculosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCereais_e_tuberculosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cereais_e_tuberculos model
   */
  readonly fields: cereais_e_tuberculosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cereais_e_tuberculos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cereais_e_tuberculosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cereais_e_tuberculos model
   */
  interface cereais_e_tuberculosFieldRefs {
    readonly Alimento: FieldRef<"cereais_e_tuberculos", 'String'>
    readonly Quantidade__g_: FieldRef<"cereais_e_tuberculos", 'Int'>
    readonly Energia__Kcal_: FieldRef<"cereais_e_tuberculos", 'Int'>
    readonly id: FieldRef<"cereais_e_tuberculos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * cereais_e_tuberculos findUnique
   */
  export type cereais_e_tuberculosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * Filter, which cereais_e_tuberculos to fetch.
     */
    where: cereais_e_tuberculosWhereUniqueInput
  }

  /**
   * cereais_e_tuberculos findUniqueOrThrow
   */
  export type cereais_e_tuberculosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * Filter, which cereais_e_tuberculos to fetch.
     */
    where: cereais_e_tuberculosWhereUniqueInput
  }

  /**
   * cereais_e_tuberculos findFirst
   */
  export type cereais_e_tuberculosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * Filter, which cereais_e_tuberculos to fetch.
     */
    where?: cereais_e_tuberculosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cereais_e_tuberculos to fetch.
     */
    orderBy?: cereais_e_tuberculosOrderByWithRelationInput | cereais_e_tuberculosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cereais_e_tuberculos.
     */
    cursor?: cereais_e_tuberculosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cereais_e_tuberculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cereais_e_tuberculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cereais_e_tuberculos.
     */
    distinct?: Cereais_e_tuberculosScalarFieldEnum | Cereais_e_tuberculosScalarFieldEnum[]
  }

  /**
   * cereais_e_tuberculos findFirstOrThrow
   */
  export type cereais_e_tuberculosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * Filter, which cereais_e_tuberculos to fetch.
     */
    where?: cereais_e_tuberculosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cereais_e_tuberculos to fetch.
     */
    orderBy?: cereais_e_tuberculosOrderByWithRelationInput | cereais_e_tuberculosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cereais_e_tuberculos.
     */
    cursor?: cereais_e_tuberculosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cereais_e_tuberculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cereais_e_tuberculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cereais_e_tuberculos.
     */
    distinct?: Cereais_e_tuberculosScalarFieldEnum | Cereais_e_tuberculosScalarFieldEnum[]
  }

  /**
   * cereais_e_tuberculos findMany
   */
  export type cereais_e_tuberculosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * Filter, which cereais_e_tuberculos to fetch.
     */
    where?: cereais_e_tuberculosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cereais_e_tuberculos to fetch.
     */
    orderBy?: cereais_e_tuberculosOrderByWithRelationInput | cereais_e_tuberculosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cereais_e_tuberculos.
     */
    cursor?: cereais_e_tuberculosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cereais_e_tuberculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cereais_e_tuberculos.
     */
    skip?: number
    distinct?: Cereais_e_tuberculosScalarFieldEnum | Cereais_e_tuberculosScalarFieldEnum[]
  }

  /**
   * cereais_e_tuberculos create
   */
  export type cereais_e_tuberculosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * The data needed to create a cereais_e_tuberculos.
     */
    data?: XOR<cereais_e_tuberculosCreateInput, cereais_e_tuberculosUncheckedCreateInput>
  }

  /**
   * cereais_e_tuberculos createMany
   */
  export type cereais_e_tuberculosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cereais_e_tuberculos.
     */
    data: cereais_e_tuberculosCreateManyInput | cereais_e_tuberculosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cereais_e_tuberculos update
   */
  export type cereais_e_tuberculosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * The data needed to update a cereais_e_tuberculos.
     */
    data: XOR<cereais_e_tuberculosUpdateInput, cereais_e_tuberculosUncheckedUpdateInput>
    /**
     * Choose, which cereais_e_tuberculos to update.
     */
    where: cereais_e_tuberculosWhereUniqueInput
  }

  /**
   * cereais_e_tuberculos updateMany
   */
  export type cereais_e_tuberculosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cereais_e_tuberculos.
     */
    data: XOR<cereais_e_tuberculosUpdateManyMutationInput, cereais_e_tuberculosUncheckedUpdateManyInput>
    /**
     * Filter which cereais_e_tuberculos to update
     */
    where?: cereais_e_tuberculosWhereInput
    /**
     * Limit how many cereais_e_tuberculos to update.
     */
    limit?: number
  }

  /**
   * cereais_e_tuberculos upsert
   */
  export type cereais_e_tuberculosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * The filter to search for the cereais_e_tuberculos to update in case it exists.
     */
    where: cereais_e_tuberculosWhereUniqueInput
    /**
     * In case the cereais_e_tuberculos found by the `where` argument doesn't exist, create a new cereais_e_tuberculos with this data.
     */
    create: XOR<cereais_e_tuberculosCreateInput, cereais_e_tuberculosUncheckedCreateInput>
    /**
     * In case the cereais_e_tuberculos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cereais_e_tuberculosUpdateInput, cereais_e_tuberculosUncheckedUpdateInput>
  }

  /**
   * cereais_e_tuberculos delete
   */
  export type cereais_e_tuberculosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
    /**
     * Filter which cereais_e_tuberculos to delete.
     */
    where: cereais_e_tuberculosWhereUniqueInput
  }

  /**
   * cereais_e_tuberculos deleteMany
   */
  export type cereais_e_tuberculosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cereais_e_tuberculos to delete
     */
    where?: cereais_e_tuberculosWhereInput
    /**
     * Limit how many cereais_e_tuberculos to delete.
     */
    limit?: number
  }

  /**
   * cereais_e_tuberculos without action
   */
  export type cereais_e_tuberculosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cereais_e_tuberculos
     */
    select?: cereais_e_tuberculosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cereais_e_tuberculos
     */
    omit?: cereais_e_tuberculosOmit<ExtArgs> | null
  }


  /**
   * Model verduras__hortali_as_e_derivados
   */

  export type AggregateVerduras__hortali_as_e_derivados = {
    _count: Verduras__hortali_as_e_derivadosCountAggregateOutputType | null
    _avg: Verduras__hortali_as_e_derivadosAvgAggregateOutputType | null
    _sum: Verduras__hortali_as_e_derivadosSumAggregateOutputType | null
    _min: Verduras__hortali_as_e_derivadosMinAggregateOutputType | null
    _max: Verduras__hortali_as_e_derivadosMaxAggregateOutputType | null
  }

  export type Verduras__hortali_as_e_derivadosAvgAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Verduras__hortali_as_e_derivadosSumAggregateOutputType = {
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Verduras__hortali_as_e_derivadosMinAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Verduras__hortali_as_e_derivadosMaxAggregateOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number | null
  }

  export type Verduras__hortali_as_e_derivadosCountAggregateOutputType = {
    Alimento: number
    Quantidade__g_: number
    Energia__Kcal_: number
    id: number
    _all: number
  }


  export type Verduras__hortali_as_e_derivadosAvgAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Verduras__hortali_as_e_derivadosSumAggregateInputType = {
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Verduras__hortali_as_e_derivadosMinAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Verduras__hortali_as_e_derivadosMaxAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
  }

  export type Verduras__hortali_as_e_derivadosCountAggregateInputType = {
    Alimento?: true
    Quantidade__g_?: true
    Energia__Kcal_?: true
    id?: true
    _all?: true
  }

  export type Verduras__hortali_as_e_derivadosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which verduras__hortali_as_e_derivados to aggregate.
     */
    where?: verduras__hortali_as_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verduras__hortali_as_e_derivados to fetch.
     */
    orderBy?: verduras__hortali_as_e_derivadosOrderByWithRelationInput | verduras__hortali_as_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: verduras__hortali_as_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verduras__hortali_as_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verduras__hortali_as_e_derivados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned verduras__hortali_as_e_derivados
    **/
    _count?: true | Verduras__hortali_as_e_derivadosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Verduras__hortali_as_e_derivadosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Verduras__hortali_as_e_derivadosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Verduras__hortali_as_e_derivadosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Verduras__hortali_as_e_derivadosMaxAggregateInputType
  }

  export type GetVerduras__hortali_as_e_derivadosAggregateType<T extends Verduras__hortali_as_e_derivadosAggregateArgs> = {
        [P in keyof T & keyof AggregateVerduras__hortali_as_e_derivados]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerduras__hortali_as_e_derivados[P]>
      : GetScalarType<T[P], AggregateVerduras__hortali_as_e_derivados[P]>
  }




  export type verduras__hortali_as_e_derivadosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: verduras__hortali_as_e_derivadosWhereInput
    orderBy?: verduras__hortali_as_e_derivadosOrderByWithAggregationInput | verduras__hortali_as_e_derivadosOrderByWithAggregationInput[]
    by: Verduras__hortali_as_e_derivadosScalarFieldEnum[] | Verduras__hortali_as_e_derivadosScalarFieldEnum
    having?: verduras__hortali_as_e_derivadosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Verduras__hortali_as_e_derivadosCountAggregateInputType | true
    _avg?: Verduras__hortali_as_e_derivadosAvgAggregateInputType
    _sum?: Verduras__hortali_as_e_derivadosSumAggregateInputType
    _min?: Verduras__hortali_as_e_derivadosMinAggregateInputType
    _max?: Verduras__hortali_as_e_derivadosMaxAggregateInputType
  }

  export type Verduras__hortali_as_e_derivadosGroupByOutputType = {
    Alimento: string | null
    Quantidade__g_: number | null
    Energia__Kcal_: number | null
    id: number
    _count: Verduras__hortali_as_e_derivadosCountAggregateOutputType | null
    _avg: Verduras__hortali_as_e_derivadosAvgAggregateOutputType | null
    _sum: Verduras__hortali_as_e_derivadosSumAggregateOutputType | null
    _min: Verduras__hortali_as_e_derivadosMinAggregateOutputType | null
    _max: Verduras__hortali_as_e_derivadosMaxAggregateOutputType | null
  }

  type GetVerduras__hortali_as_e_derivadosGroupByPayload<T extends verduras__hortali_as_e_derivadosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Verduras__hortali_as_e_derivadosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Verduras__hortali_as_e_derivadosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Verduras__hortali_as_e_derivadosGroupByOutputType[P]>
            : GetScalarType<T[P], Verduras__hortali_as_e_derivadosGroupByOutputType[P]>
        }
      >
    >


  export type verduras__hortali_as_e_derivadosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }, ExtArgs["result"]["verduras__hortali_as_e_derivados"]>



  export type verduras__hortali_as_e_derivadosSelectScalar = {
    Alimento?: boolean
    Quantidade__g_?: boolean
    Energia__Kcal_?: boolean
    id?: boolean
  }

  export type verduras__hortali_as_e_derivadosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"Alimento" | "Quantidade__g_" | "Energia__Kcal_" | "id", ExtArgs["result"]["verduras__hortali_as_e_derivados"]>

  export type $verduras__hortali_as_e_derivadosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "verduras__hortali_as_e_derivados"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Alimento: string | null
      Quantidade__g_: number | null
      Energia__Kcal_: number | null
      id: number
    }, ExtArgs["result"]["verduras__hortali_as_e_derivados"]>
    composites: {}
  }

  type verduras__hortali_as_e_derivadosGetPayload<S extends boolean | null | undefined | verduras__hortali_as_e_derivadosDefaultArgs> = $Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload, S>

  type verduras__hortali_as_e_derivadosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<verduras__hortali_as_e_derivadosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Verduras__hortali_as_e_derivadosCountAggregateInputType | true
    }

  export interface verduras__hortali_as_e_derivadosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['verduras__hortali_as_e_derivados'], meta: { name: 'verduras__hortali_as_e_derivados' } }
    /**
     * Find zero or one Verduras__hortali_as_e_derivados that matches the filter.
     * @param {verduras__hortali_as_e_derivadosFindUniqueArgs} args - Arguments to find a Verduras__hortali_as_e_derivados
     * @example
     * // Get one Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends verduras__hortali_as_e_derivadosFindUniqueArgs>(args: SelectSubset<T, verduras__hortali_as_e_derivadosFindUniqueArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verduras__hortali_as_e_derivados that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {verduras__hortali_as_e_derivadosFindUniqueOrThrowArgs} args - Arguments to find a Verduras__hortali_as_e_derivados
     * @example
     * // Get one Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends verduras__hortali_as_e_derivadosFindUniqueOrThrowArgs>(args: SelectSubset<T, verduras__hortali_as_e_derivadosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verduras__hortali_as_e_derivados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verduras__hortali_as_e_derivadosFindFirstArgs} args - Arguments to find a Verduras__hortali_as_e_derivados
     * @example
     * // Get one Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends verduras__hortali_as_e_derivadosFindFirstArgs>(args?: SelectSubset<T, verduras__hortali_as_e_derivadosFindFirstArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verduras__hortali_as_e_derivados that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verduras__hortali_as_e_derivadosFindFirstOrThrowArgs} args - Arguments to find a Verduras__hortali_as_e_derivados
     * @example
     * // Get one Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends verduras__hortali_as_e_derivadosFindFirstOrThrowArgs>(args?: SelectSubset<T, verduras__hortali_as_e_derivadosFindFirstOrThrowArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verduras__hortali_as_e_derivados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verduras__hortali_as_e_derivadosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.findMany()
     * 
     * // Get first 10 Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.findMany({ take: 10 })
     * 
     * // Only select the `Alimento`
     * const verduras__hortali_as_e_derivadosWithAlimentoOnly = await prisma.verduras__hortali_as_e_derivados.findMany({ select: { Alimento: true } })
     * 
     */
    findMany<T extends verduras__hortali_as_e_derivadosFindManyArgs>(args?: SelectSubset<T, verduras__hortali_as_e_derivadosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verduras__hortali_as_e_derivados.
     * @param {verduras__hortali_as_e_derivadosCreateArgs} args - Arguments to create a Verduras__hortali_as_e_derivados.
     * @example
     * // Create one Verduras__hortali_as_e_derivados
     * const Verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.create({
     *   data: {
     *     // ... data to create a Verduras__hortali_as_e_derivados
     *   }
     * })
     * 
     */
    create<T extends verduras__hortali_as_e_derivadosCreateArgs>(args: SelectSubset<T, verduras__hortali_as_e_derivadosCreateArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verduras__hortali_as_e_derivados.
     * @param {verduras__hortali_as_e_derivadosCreateManyArgs} args - Arguments to create many Verduras__hortali_as_e_derivados.
     * @example
     * // Create many Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends verduras__hortali_as_e_derivadosCreateManyArgs>(args?: SelectSubset<T, verduras__hortali_as_e_derivadosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Verduras__hortali_as_e_derivados.
     * @param {verduras__hortali_as_e_derivadosDeleteArgs} args - Arguments to delete one Verduras__hortali_as_e_derivados.
     * @example
     * // Delete one Verduras__hortali_as_e_derivados
     * const Verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.delete({
     *   where: {
     *     // ... filter to delete one Verduras__hortali_as_e_derivados
     *   }
     * })
     * 
     */
    delete<T extends verduras__hortali_as_e_derivadosDeleteArgs>(args: SelectSubset<T, verduras__hortali_as_e_derivadosDeleteArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verduras__hortali_as_e_derivados.
     * @param {verduras__hortali_as_e_derivadosUpdateArgs} args - Arguments to update one Verduras__hortali_as_e_derivados.
     * @example
     * // Update one Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends verduras__hortali_as_e_derivadosUpdateArgs>(args: SelectSubset<T, verduras__hortali_as_e_derivadosUpdateArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verduras__hortali_as_e_derivados.
     * @param {verduras__hortali_as_e_derivadosDeleteManyArgs} args - Arguments to filter Verduras__hortali_as_e_derivados to delete.
     * @example
     * // Delete a few Verduras__hortali_as_e_derivados
     * const { count } = await prisma.verduras__hortali_as_e_derivados.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends verduras__hortali_as_e_derivadosDeleteManyArgs>(args?: SelectSubset<T, verduras__hortali_as_e_derivadosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verduras__hortali_as_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verduras__hortali_as_e_derivadosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends verduras__hortali_as_e_derivadosUpdateManyArgs>(args: SelectSubset<T, verduras__hortali_as_e_derivadosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Verduras__hortali_as_e_derivados.
     * @param {verduras__hortali_as_e_derivadosUpsertArgs} args - Arguments to update or create a Verduras__hortali_as_e_derivados.
     * @example
     * // Update or create a Verduras__hortali_as_e_derivados
     * const verduras__hortali_as_e_derivados = await prisma.verduras__hortali_as_e_derivados.upsert({
     *   create: {
     *     // ... data to create a Verduras__hortali_as_e_derivados
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verduras__hortali_as_e_derivados we want to update
     *   }
     * })
     */
    upsert<T extends verduras__hortali_as_e_derivadosUpsertArgs>(args: SelectSubset<T, verduras__hortali_as_e_derivadosUpsertArgs<ExtArgs>>): Prisma__verduras__hortali_as_e_derivadosClient<$Result.GetResult<Prisma.$verduras__hortali_as_e_derivadosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verduras__hortali_as_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verduras__hortali_as_e_derivadosCountArgs} args - Arguments to filter Verduras__hortali_as_e_derivados to count.
     * @example
     * // Count the number of Verduras__hortali_as_e_derivados
     * const count = await prisma.verduras__hortali_as_e_derivados.count({
     *   where: {
     *     // ... the filter for the Verduras__hortali_as_e_derivados we want to count
     *   }
     * })
    **/
    count<T extends verduras__hortali_as_e_derivadosCountArgs>(
      args?: Subset<T, verduras__hortali_as_e_derivadosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Verduras__hortali_as_e_derivadosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verduras__hortali_as_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Verduras__hortali_as_e_derivadosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Verduras__hortali_as_e_derivadosAggregateArgs>(args: Subset<T, Verduras__hortali_as_e_derivadosAggregateArgs>): Prisma.PrismaPromise<GetVerduras__hortali_as_e_derivadosAggregateType<T>>

    /**
     * Group by Verduras__hortali_as_e_derivados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verduras__hortali_as_e_derivadosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends verduras__hortali_as_e_derivadosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: verduras__hortali_as_e_derivadosGroupByArgs['orderBy'] }
        : { orderBy?: verduras__hortali_as_e_derivadosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, verduras__hortali_as_e_derivadosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerduras__hortali_as_e_derivadosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the verduras__hortali_as_e_derivados model
   */
  readonly fields: verduras__hortali_as_e_derivadosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for verduras__hortali_as_e_derivados.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__verduras__hortali_as_e_derivadosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the verduras__hortali_as_e_derivados model
   */
  interface verduras__hortali_as_e_derivadosFieldRefs {
    readonly Alimento: FieldRef<"verduras__hortali_as_e_derivados", 'String'>
    readonly Quantidade__g_: FieldRef<"verduras__hortali_as_e_derivados", 'Int'>
    readonly Energia__Kcal_: FieldRef<"verduras__hortali_as_e_derivados", 'Int'>
    readonly id: FieldRef<"verduras__hortali_as_e_derivados", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * verduras__hortali_as_e_derivados findUnique
   */
  export type verduras__hortali_as_e_derivadosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which verduras__hortali_as_e_derivados to fetch.
     */
    where: verduras__hortali_as_e_derivadosWhereUniqueInput
  }

  /**
   * verduras__hortali_as_e_derivados findUniqueOrThrow
   */
  export type verduras__hortali_as_e_derivadosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which verduras__hortali_as_e_derivados to fetch.
     */
    where: verduras__hortali_as_e_derivadosWhereUniqueInput
  }

  /**
   * verduras__hortali_as_e_derivados findFirst
   */
  export type verduras__hortali_as_e_derivadosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which verduras__hortali_as_e_derivados to fetch.
     */
    where?: verduras__hortali_as_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verduras__hortali_as_e_derivados to fetch.
     */
    orderBy?: verduras__hortali_as_e_derivadosOrderByWithRelationInput | verduras__hortali_as_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for verduras__hortali_as_e_derivados.
     */
    cursor?: verduras__hortali_as_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verduras__hortali_as_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verduras__hortali_as_e_derivados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of verduras__hortali_as_e_derivados.
     */
    distinct?: Verduras__hortali_as_e_derivadosScalarFieldEnum | Verduras__hortali_as_e_derivadosScalarFieldEnum[]
  }

  /**
   * verduras__hortali_as_e_derivados findFirstOrThrow
   */
  export type verduras__hortali_as_e_derivadosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which verduras__hortali_as_e_derivados to fetch.
     */
    where?: verduras__hortali_as_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verduras__hortali_as_e_derivados to fetch.
     */
    orderBy?: verduras__hortali_as_e_derivadosOrderByWithRelationInput | verduras__hortali_as_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for verduras__hortali_as_e_derivados.
     */
    cursor?: verduras__hortali_as_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verduras__hortali_as_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verduras__hortali_as_e_derivados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of verduras__hortali_as_e_derivados.
     */
    distinct?: Verduras__hortali_as_e_derivadosScalarFieldEnum | Verduras__hortali_as_e_derivadosScalarFieldEnum[]
  }

  /**
   * verduras__hortali_as_e_derivados findMany
   */
  export type verduras__hortali_as_e_derivadosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter, which verduras__hortali_as_e_derivados to fetch.
     */
    where?: verduras__hortali_as_e_derivadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verduras__hortali_as_e_derivados to fetch.
     */
    orderBy?: verduras__hortali_as_e_derivadosOrderByWithRelationInput | verduras__hortali_as_e_derivadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing verduras__hortali_as_e_derivados.
     */
    cursor?: verduras__hortali_as_e_derivadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verduras__hortali_as_e_derivados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verduras__hortali_as_e_derivados.
     */
    skip?: number
    distinct?: Verduras__hortali_as_e_derivadosScalarFieldEnum | Verduras__hortali_as_e_derivadosScalarFieldEnum[]
  }

  /**
   * verduras__hortali_as_e_derivados create
   */
  export type verduras__hortali_as_e_derivadosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * The data needed to create a verduras__hortali_as_e_derivados.
     */
    data?: XOR<verduras__hortali_as_e_derivadosCreateInput, verduras__hortali_as_e_derivadosUncheckedCreateInput>
  }

  /**
   * verduras__hortali_as_e_derivados createMany
   */
  export type verduras__hortali_as_e_derivadosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many verduras__hortali_as_e_derivados.
     */
    data: verduras__hortali_as_e_derivadosCreateManyInput | verduras__hortali_as_e_derivadosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * verduras__hortali_as_e_derivados update
   */
  export type verduras__hortali_as_e_derivadosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * The data needed to update a verduras__hortali_as_e_derivados.
     */
    data: XOR<verduras__hortali_as_e_derivadosUpdateInput, verduras__hortali_as_e_derivadosUncheckedUpdateInput>
    /**
     * Choose, which verduras__hortali_as_e_derivados to update.
     */
    where: verduras__hortali_as_e_derivadosWhereUniqueInput
  }

  /**
   * verduras__hortali_as_e_derivados updateMany
   */
  export type verduras__hortali_as_e_derivadosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update verduras__hortali_as_e_derivados.
     */
    data: XOR<verduras__hortali_as_e_derivadosUpdateManyMutationInput, verduras__hortali_as_e_derivadosUncheckedUpdateManyInput>
    /**
     * Filter which verduras__hortali_as_e_derivados to update
     */
    where?: verduras__hortali_as_e_derivadosWhereInput
    /**
     * Limit how many verduras__hortali_as_e_derivados to update.
     */
    limit?: number
  }

  /**
   * verduras__hortali_as_e_derivados upsert
   */
  export type verduras__hortali_as_e_derivadosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * The filter to search for the verduras__hortali_as_e_derivados to update in case it exists.
     */
    where: verduras__hortali_as_e_derivadosWhereUniqueInput
    /**
     * In case the verduras__hortali_as_e_derivados found by the `where` argument doesn't exist, create a new verduras__hortali_as_e_derivados with this data.
     */
    create: XOR<verduras__hortali_as_e_derivadosCreateInput, verduras__hortali_as_e_derivadosUncheckedCreateInput>
    /**
     * In case the verduras__hortali_as_e_derivados was found with the provided `where` argument, update it with this data.
     */
    update: XOR<verduras__hortali_as_e_derivadosUpdateInput, verduras__hortali_as_e_derivadosUncheckedUpdateInput>
  }

  /**
   * verduras__hortali_as_e_derivados delete
   */
  export type verduras__hortali_as_e_derivadosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
    /**
     * Filter which verduras__hortali_as_e_derivados to delete.
     */
    where: verduras__hortali_as_e_derivadosWhereUniqueInput
  }

  /**
   * verduras__hortali_as_e_derivados deleteMany
   */
  export type verduras__hortali_as_e_derivadosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which verduras__hortali_as_e_derivados to delete
     */
    where?: verduras__hortali_as_e_derivadosWhereInput
    /**
     * Limit how many verduras__hortali_as_e_derivados to delete.
     */
    limit?: number
  }

  /**
   * verduras__hortali_as_e_derivados without action
   */
  export type verduras__hortali_as_e_derivadosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verduras__hortali_as_e_derivados
     */
    select?: verduras__hortali_as_e_derivadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verduras__hortali_as_e_derivados
     */
    omit?: verduras__hortali_as_e_derivadosOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GordurasScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type GordurasScalarFieldEnum = (typeof GordurasScalarFieldEnum)[keyof typeof GordurasScalarFieldEnum]


  export const LeguminosasScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type LeguminosasScalarFieldEnum = (typeof LeguminosasScalarFieldEnum)[keyof typeof LeguminosasScalarFieldEnum]


  export const Leite_e_derivadosScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type Leite_e_derivadosScalarFieldEnum = (typeof Leite_e_derivadosScalarFieldEnum)[keyof typeof Leite_e_derivadosScalarFieldEnum]


  export const ProteinaScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type ProteinaScalarFieldEnum = (typeof ProteinaScalarFieldEnum)[keyof typeof ProteinaScalarFieldEnum]


  export const AlimentosScalarFieldEnum: {
    id: 'id',
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_'
  };

  export type AlimentosScalarFieldEnum = (typeof AlimentosScalarFieldEnum)[keyof typeof AlimentosScalarFieldEnum]


  export const FrutasScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type FrutasScalarFieldEnum = (typeof FrutasScalarFieldEnum)[keyof typeof FrutasScalarFieldEnum]


  export const SementesScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type SementesScalarFieldEnum = (typeof SementesScalarFieldEnum)[keyof typeof SementesScalarFieldEnum]


  export const Cereais_e_tuberculosScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type Cereais_e_tuberculosScalarFieldEnum = (typeof Cereais_e_tuberculosScalarFieldEnum)[keyof typeof Cereais_e_tuberculosScalarFieldEnum]


  export const Verduras__hortali_as_e_derivadosScalarFieldEnum: {
    Alimento: 'Alimento',
    Quantidade__g_: 'Quantidade__g_',
    Energia__Kcal_: 'Energia__Kcal_',
    id: 'id'
  };

  export type Verduras__hortali_as_e_derivadosScalarFieldEnum = (typeof Verduras__hortali_as_e_derivadosScalarFieldEnum)[keyof typeof Verduras__hortali_as_e_derivadosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const gordurasOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type gordurasOrderByRelevanceFieldEnum = (typeof gordurasOrderByRelevanceFieldEnum)[keyof typeof gordurasOrderByRelevanceFieldEnum]


  export const leguminosasOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type leguminosasOrderByRelevanceFieldEnum = (typeof leguminosasOrderByRelevanceFieldEnum)[keyof typeof leguminosasOrderByRelevanceFieldEnum]


  export const leite_e_derivadosOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type leite_e_derivadosOrderByRelevanceFieldEnum = (typeof leite_e_derivadosOrderByRelevanceFieldEnum)[keyof typeof leite_e_derivadosOrderByRelevanceFieldEnum]


  export const proteinaOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type proteinaOrderByRelevanceFieldEnum = (typeof proteinaOrderByRelevanceFieldEnum)[keyof typeof proteinaOrderByRelevanceFieldEnum]


  export const AlimentosOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type AlimentosOrderByRelevanceFieldEnum = (typeof AlimentosOrderByRelevanceFieldEnum)[keyof typeof AlimentosOrderByRelevanceFieldEnum]


  export const frutasOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type frutasOrderByRelevanceFieldEnum = (typeof frutasOrderByRelevanceFieldEnum)[keyof typeof frutasOrderByRelevanceFieldEnum]


  export const sementesOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type sementesOrderByRelevanceFieldEnum = (typeof sementesOrderByRelevanceFieldEnum)[keyof typeof sementesOrderByRelevanceFieldEnum]


  export const cereais_e_tuberculosOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type cereais_e_tuberculosOrderByRelevanceFieldEnum = (typeof cereais_e_tuberculosOrderByRelevanceFieldEnum)[keyof typeof cereais_e_tuberculosOrderByRelevanceFieldEnum]


  export const verduras__hortali_as_e_derivadosOrderByRelevanceFieldEnum: {
    Alimento: 'Alimento'
  };

  export type verduras__hortali_as_e_derivadosOrderByRelevanceFieldEnum = (typeof verduras__hortali_as_e_derivadosOrderByRelevanceFieldEnum)[keyof typeof verduras__hortali_as_e_derivadosOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type gordurasWhereInput = {
    AND?: gordurasWhereInput | gordurasWhereInput[]
    OR?: gordurasWhereInput[]
    NOT?: gordurasWhereInput | gordurasWhereInput[]
    Alimento?: StringNullableFilter<"gorduras"> | string | null
    Quantidade__g_?: IntNullableFilter<"gorduras"> | number | null
    Energia__Kcal_?: IntNullableFilter<"gorduras"> | number | null
    id?: IntFilter<"gorduras"> | number
  }

  export type gordurasOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: gordurasOrderByRelevanceInput
  }

  export type gordurasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: gordurasWhereInput | gordurasWhereInput[]
    OR?: gordurasWhereInput[]
    NOT?: gordurasWhereInput | gordurasWhereInput[]
    Alimento?: StringNullableFilter<"gorduras"> | string | null
    Quantidade__g_?: IntNullableFilter<"gorduras"> | number | null
    Energia__Kcal_?: IntNullableFilter<"gorduras"> | number | null
  }, "id">

  export type gordurasOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: gordurasCountOrderByAggregateInput
    _avg?: gordurasAvgOrderByAggregateInput
    _max?: gordurasMaxOrderByAggregateInput
    _min?: gordurasMinOrderByAggregateInput
    _sum?: gordurasSumOrderByAggregateInput
  }

  export type gordurasScalarWhereWithAggregatesInput = {
    AND?: gordurasScalarWhereWithAggregatesInput | gordurasScalarWhereWithAggregatesInput[]
    OR?: gordurasScalarWhereWithAggregatesInput[]
    NOT?: gordurasScalarWhereWithAggregatesInput | gordurasScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"gorduras"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"gorduras"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"gorduras"> | number | null
    id?: IntWithAggregatesFilter<"gorduras"> | number
  }

  export type leguminosasWhereInput = {
    AND?: leguminosasWhereInput | leguminosasWhereInput[]
    OR?: leguminosasWhereInput[]
    NOT?: leguminosasWhereInput | leguminosasWhereInput[]
    Alimento?: StringNullableFilter<"leguminosas"> | string | null
    Quantidade__g_?: IntNullableFilter<"leguminosas"> | number | null
    Energia__Kcal_?: IntNullableFilter<"leguminosas"> | number | null
    id?: IntFilter<"leguminosas"> | number
  }

  export type leguminosasOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: leguminosasOrderByRelevanceInput
  }

  export type leguminosasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: leguminosasWhereInput | leguminosasWhereInput[]
    OR?: leguminosasWhereInput[]
    NOT?: leguminosasWhereInput | leguminosasWhereInput[]
    Alimento?: StringNullableFilter<"leguminosas"> | string | null
    Quantidade__g_?: IntNullableFilter<"leguminosas"> | number | null
    Energia__Kcal_?: IntNullableFilter<"leguminosas"> | number | null
  }, "id">

  export type leguminosasOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: leguminosasCountOrderByAggregateInput
    _avg?: leguminosasAvgOrderByAggregateInput
    _max?: leguminosasMaxOrderByAggregateInput
    _min?: leguminosasMinOrderByAggregateInput
    _sum?: leguminosasSumOrderByAggregateInput
  }

  export type leguminosasScalarWhereWithAggregatesInput = {
    AND?: leguminosasScalarWhereWithAggregatesInput | leguminosasScalarWhereWithAggregatesInput[]
    OR?: leguminosasScalarWhereWithAggregatesInput[]
    NOT?: leguminosasScalarWhereWithAggregatesInput | leguminosasScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"leguminosas"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"leguminosas"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"leguminosas"> | number | null
    id?: IntWithAggregatesFilter<"leguminosas"> | number
  }

  export type leite_e_derivadosWhereInput = {
    AND?: leite_e_derivadosWhereInput | leite_e_derivadosWhereInput[]
    OR?: leite_e_derivadosWhereInput[]
    NOT?: leite_e_derivadosWhereInput | leite_e_derivadosWhereInput[]
    Alimento?: StringNullableFilter<"leite_e_derivados"> | string | null
    Quantidade__g_?: IntNullableFilter<"leite_e_derivados"> | number | null
    Energia__Kcal_?: IntNullableFilter<"leite_e_derivados"> | number | null
    id?: IntFilter<"leite_e_derivados"> | number
  }

  export type leite_e_derivadosOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: leite_e_derivadosOrderByRelevanceInput
  }

  export type leite_e_derivadosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: leite_e_derivadosWhereInput | leite_e_derivadosWhereInput[]
    OR?: leite_e_derivadosWhereInput[]
    NOT?: leite_e_derivadosWhereInput | leite_e_derivadosWhereInput[]
    Alimento?: StringNullableFilter<"leite_e_derivados"> | string | null
    Quantidade__g_?: IntNullableFilter<"leite_e_derivados"> | number | null
    Energia__Kcal_?: IntNullableFilter<"leite_e_derivados"> | number | null
  }, "id">

  export type leite_e_derivadosOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: leite_e_derivadosCountOrderByAggregateInput
    _avg?: leite_e_derivadosAvgOrderByAggregateInput
    _max?: leite_e_derivadosMaxOrderByAggregateInput
    _min?: leite_e_derivadosMinOrderByAggregateInput
    _sum?: leite_e_derivadosSumOrderByAggregateInput
  }

  export type leite_e_derivadosScalarWhereWithAggregatesInput = {
    AND?: leite_e_derivadosScalarWhereWithAggregatesInput | leite_e_derivadosScalarWhereWithAggregatesInput[]
    OR?: leite_e_derivadosScalarWhereWithAggregatesInput[]
    NOT?: leite_e_derivadosScalarWhereWithAggregatesInput | leite_e_derivadosScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"leite_e_derivados"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"leite_e_derivados"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"leite_e_derivados"> | number | null
    id?: IntWithAggregatesFilter<"leite_e_derivados"> | number
  }

  export type proteinaWhereInput = {
    AND?: proteinaWhereInput | proteinaWhereInput[]
    OR?: proteinaWhereInput[]
    NOT?: proteinaWhereInput | proteinaWhereInput[]
    Alimento?: StringNullableFilter<"proteina"> | string | null
    Quantidade__g_?: IntNullableFilter<"proteina"> | number | null
    Energia__Kcal_?: IntNullableFilter<"proteina"> | number | null
    id?: IntFilter<"proteina"> | number
  }

  export type proteinaOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: proteinaOrderByRelevanceInput
  }

  export type proteinaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: proteinaWhereInput | proteinaWhereInput[]
    OR?: proteinaWhereInput[]
    NOT?: proteinaWhereInput | proteinaWhereInput[]
    Alimento?: StringNullableFilter<"proteina"> | string | null
    Quantidade__g_?: IntNullableFilter<"proteina"> | number | null
    Energia__Kcal_?: IntNullableFilter<"proteina"> | number | null
  }, "id">

  export type proteinaOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: proteinaCountOrderByAggregateInput
    _avg?: proteinaAvgOrderByAggregateInput
    _max?: proteinaMaxOrderByAggregateInput
    _min?: proteinaMinOrderByAggregateInput
    _sum?: proteinaSumOrderByAggregateInput
  }

  export type proteinaScalarWhereWithAggregatesInput = {
    AND?: proteinaScalarWhereWithAggregatesInput | proteinaScalarWhereWithAggregatesInput[]
    OR?: proteinaScalarWhereWithAggregatesInput[]
    NOT?: proteinaScalarWhereWithAggregatesInput | proteinaScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"proteina"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"proteina"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"proteina"> | number | null
    id?: IntWithAggregatesFilter<"proteina"> | number
  }

  export type AlimentosWhereInput = {
    AND?: AlimentosWhereInput | AlimentosWhereInput[]
    OR?: AlimentosWhereInput[]
    NOT?: AlimentosWhereInput | AlimentosWhereInput[]
    id?: IntFilter<"Alimentos"> | number
    Alimento?: StringFilter<"Alimentos"> | string
    Quantidade__g_?: IntFilter<"Alimentos"> | number
    Energia__Kcal_?: IntFilter<"Alimentos"> | number
  }

  export type AlimentosOrderByWithRelationInput = {
    id?: SortOrder
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    _relevance?: AlimentosOrderByRelevanceInput
  }

  export type AlimentosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlimentosWhereInput | AlimentosWhereInput[]
    OR?: AlimentosWhereInput[]
    NOT?: AlimentosWhereInput | AlimentosWhereInput[]
    Alimento?: StringFilter<"Alimentos"> | string
    Quantidade__g_?: IntFilter<"Alimentos"> | number
    Energia__Kcal_?: IntFilter<"Alimentos"> | number
  }, "id">

  export type AlimentosOrderByWithAggregationInput = {
    id?: SortOrder
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    _count?: AlimentosCountOrderByAggregateInput
    _avg?: AlimentosAvgOrderByAggregateInput
    _max?: AlimentosMaxOrderByAggregateInput
    _min?: AlimentosMinOrderByAggregateInput
    _sum?: AlimentosSumOrderByAggregateInput
  }

  export type AlimentosScalarWhereWithAggregatesInput = {
    AND?: AlimentosScalarWhereWithAggregatesInput | AlimentosScalarWhereWithAggregatesInput[]
    OR?: AlimentosScalarWhereWithAggregatesInput[]
    NOT?: AlimentosScalarWhereWithAggregatesInput | AlimentosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alimentos"> | number
    Alimento?: StringWithAggregatesFilter<"Alimentos"> | string
    Quantidade__g_?: IntWithAggregatesFilter<"Alimentos"> | number
    Energia__Kcal_?: IntWithAggregatesFilter<"Alimentos"> | number
  }

  export type frutasWhereInput = {
    AND?: frutasWhereInput | frutasWhereInput[]
    OR?: frutasWhereInput[]
    NOT?: frutasWhereInput | frutasWhereInput[]
    Alimento?: StringNullableFilter<"frutas"> | string | null
    Quantidade__g_?: IntNullableFilter<"frutas"> | number | null
    Energia__Kcal_?: IntNullableFilter<"frutas"> | number | null
    id?: IntFilter<"frutas"> | number
  }

  export type frutasOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: frutasOrderByRelevanceInput
  }

  export type frutasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: frutasWhereInput | frutasWhereInput[]
    OR?: frutasWhereInput[]
    NOT?: frutasWhereInput | frutasWhereInput[]
    Alimento?: StringNullableFilter<"frutas"> | string | null
    Quantidade__g_?: IntNullableFilter<"frutas"> | number | null
    Energia__Kcal_?: IntNullableFilter<"frutas"> | number | null
  }, "id">

  export type frutasOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: frutasCountOrderByAggregateInput
    _avg?: frutasAvgOrderByAggregateInput
    _max?: frutasMaxOrderByAggregateInput
    _min?: frutasMinOrderByAggregateInput
    _sum?: frutasSumOrderByAggregateInput
  }

  export type frutasScalarWhereWithAggregatesInput = {
    AND?: frutasScalarWhereWithAggregatesInput | frutasScalarWhereWithAggregatesInput[]
    OR?: frutasScalarWhereWithAggregatesInput[]
    NOT?: frutasScalarWhereWithAggregatesInput | frutasScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"frutas"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"frutas"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"frutas"> | number | null
    id?: IntWithAggregatesFilter<"frutas"> | number
  }

  export type sementesWhereInput = {
    AND?: sementesWhereInput | sementesWhereInput[]
    OR?: sementesWhereInput[]
    NOT?: sementesWhereInput | sementesWhereInput[]
    Alimento?: StringNullableFilter<"sementes"> | string | null
    Quantidade__g_?: IntNullableFilter<"sementes"> | number | null
    Energia__Kcal_?: IntNullableFilter<"sementes"> | number | null
    id?: IntFilter<"sementes"> | number
  }

  export type sementesOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: sementesOrderByRelevanceInput
  }

  export type sementesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: sementesWhereInput | sementesWhereInput[]
    OR?: sementesWhereInput[]
    NOT?: sementesWhereInput | sementesWhereInput[]
    Alimento?: StringNullableFilter<"sementes"> | string | null
    Quantidade__g_?: IntNullableFilter<"sementes"> | number | null
    Energia__Kcal_?: IntNullableFilter<"sementes"> | number | null
  }, "id">

  export type sementesOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: sementesCountOrderByAggregateInput
    _avg?: sementesAvgOrderByAggregateInput
    _max?: sementesMaxOrderByAggregateInput
    _min?: sementesMinOrderByAggregateInput
    _sum?: sementesSumOrderByAggregateInput
  }

  export type sementesScalarWhereWithAggregatesInput = {
    AND?: sementesScalarWhereWithAggregatesInput | sementesScalarWhereWithAggregatesInput[]
    OR?: sementesScalarWhereWithAggregatesInput[]
    NOT?: sementesScalarWhereWithAggregatesInput | sementesScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"sementes"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"sementes"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"sementes"> | number | null
    id?: IntWithAggregatesFilter<"sementes"> | number
  }

  export type cereais_e_tuberculosWhereInput = {
    AND?: cereais_e_tuberculosWhereInput | cereais_e_tuberculosWhereInput[]
    OR?: cereais_e_tuberculosWhereInput[]
    NOT?: cereais_e_tuberculosWhereInput | cereais_e_tuberculosWhereInput[]
    Alimento?: StringNullableFilter<"cereais_e_tuberculos"> | string | null
    Quantidade__g_?: IntNullableFilter<"cereais_e_tuberculos"> | number | null
    Energia__Kcal_?: IntNullableFilter<"cereais_e_tuberculos"> | number | null
    id?: IntFilter<"cereais_e_tuberculos"> | number
  }

  export type cereais_e_tuberculosOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: cereais_e_tuberculosOrderByRelevanceInput
  }

  export type cereais_e_tuberculosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cereais_e_tuberculosWhereInput | cereais_e_tuberculosWhereInput[]
    OR?: cereais_e_tuberculosWhereInput[]
    NOT?: cereais_e_tuberculosWhereInput | cereais_e_tuberculosWhereInput[]
    Alimento?: StringNullableFilter<"cereais_e_tuberculos"> | string | null
    Quantidade__g_?: IntNullableFilter<"cereais_e_tuberculos"> | number | null
    Energia__Kcal_?: IntNullableFilter<"cereais_e_tuberculos"> | number | null
  }, "id">

  export type cereais_e_tuberculosOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: cereais_e_tuberculosCountOrderByAggregateInput
    _avg?: cereais_e_tuberculosAvgOrderByAggregateInput
    _max?: cereais_e_tuberculosMaxOrderByAggregateInput
    _min?: cereais_e_tuberculosMinOrderByAggregateInput
    _sum?: cereais_e_tuberculosSumOrderByAggregateInput
  }

  export type cereais_e_tuberculosScalarWhereWithAggregatesInput = {
    AND?: cereais_e_tuberculosScalarWhereWithAggregatesInput | cereais_e_tuberculosScalarWhereWithAggregatesInput[]
    OR?: cereais_e_tuberculosScalarWhereWithAggregatesInput[]
    NOT?: cereais_e_tuberculosScalarWhereWithAggregatesInput | cereais_e_tuberculosScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"cereais_e_tuberculos"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"cereais_e_tuberculos"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"cereais_e_tuberculos"> | number | null
    id?: IntWithAggregatesFilter<"cereais_e_tuberculos"> | number
  }

  export type verduras__hortali_as_e_derivadosWhereInput = {
    AND?: verduras__hortali_as_e_derivadosWhereInput | verduras__hortali_as_e_derivadosWhereInput[]
    OR?: verduras__hortali_as_e_derivadosWhereInput[]
    NOT?: verduras__hortali_as_e_derivadosWhereInput | verduras__hortali_as_e_derivadosWhereInput[]
    Alimento?: StringNullableFilter<"verduras__hortali_as_e_derivados"> | string | null
    Quantidade__g_?: IntNullableFilter<"verduras__hortali_as_e_derivados"> | number | null
    Energia__Kcal_?: IntNullableFilter<"verduras__hortali_as_e_derivados"> | number | null
    id?: IntFilter<"verduras__hortali_as_e_derivados"> | number
  }

  export type verduras__hortali_as_e_derivadosOrderByWithRelationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _relevance?: verduras__hortali_as_e_derivadosOrderByRelevanceInput
  }

  export type verduras__hortali_as_e_derivadosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: verduras__hortali_as_e_derivadosWhereInput | verduras__hortali_as_e_derivadosWhereInput[]
    OR?: verduras__hortali_as_e_derivadosWhereInput[]
    NOT?: verduras__hortali_as_e_derivadosWhereInput | verduras__hortali_as_e_derivadosWhereInput[]
    Alimento?: StringNullableFilter<"verduras__hortali_as_e_derivados"> | string | null
    Quantidade__g_?: IntNullableFilter<"verduras__hortali_as_e_derivados"> | number | null
    Energia__Kcal_?: IntNullableFilter<"verduras__hortali_as_e_derivados"> | number | null
  }, "id">

  export type verduras__hortali_as_e_derivadosOrderByWithAggregationInput = {
    Alimento?: SortOrderInput | SortOrder
    Quantidade__g_?: SortOrderInput | SortOrder
    Energia__Kcal_?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: verduras__hortali_as_e_derivadosCountOrderByAggregateInput
    _avg?: verduras__hortali_as_e_derivadosAvgOrderByAggregateInput
    _max?: verduras__hortali_as_e_derivadosMaxOrderByAggregateInput
    _min?: verduras__hortali_as_e_derivadosMinOrderByAggregateInput
    _sum?: verduras__hortali_as_e_derivadosSumOrderByAggregateInput
  }

  export type verduras__hortali_as_e_derivadosScalarWhereWithAggregatesInput = {
    AND?: verduras__hortali_as_e_derivadosScalarWhereWithAggregatesInput | verduras__hortali_as_e_derivadosScalarWhereWithAggregatesInput[]
    OR?: verduras__hortali_as_e_derivadosScalarWhereWithAggregatesInput[]
    NOT?: verduras__hortali_as_e_derivadosScalarWhereWithAggregatesInput | verduras__hortali_as_e_derivadosScalarWhereWithAggregatesInput[]
    Alimento?: StringNullableWithAggregatesFilter<"verduras__hortali_as_e_derivados"> | string | null
    Quantidade__g_?: IntNullableWithAggregatesFilter<"verduras__hortali_as_e_derivados"> | number | null
    Energia__Kcal_?: IntNullableWithAggregatesFilter<"verduras__hortali_as_e_derivados"> | number | null
    id?: IntWithAggregatesFilter<"verduras__hortali_as_e_derivados"> | number
  }

  export type gordurasCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type gordurasUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type gordurasUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type gordurasUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type gordurasCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type gordurasUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type gordurasUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type leguminosasCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type leguminosasUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type leguminosasUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type leguminosasUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type leguminosasCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type leguminosasUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type leguminosasUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type leite_e_derivadosCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type leite_e_derivadosUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type leite_e_derivadosUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type leite_e_derivadosUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type leite_e_derivadosCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type leite_e_derivadosUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type leite_e_derivadosUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type proteinaCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type proteinaUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type proteinaUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type proteinaUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type proteinaCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type proteinaUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type proteinaUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentosCreateInput = {
    Alimento: string
    Quantidade__g_: number
    Energia__Kcal_: number
  }

  export type AlimentosUncheckedCreateInput = {
    id?: number
    Alimento: string
    Quantidade__g_: number
    Energia__Kcal_: number
  }

  export type AlimentosUpdateInput = {
    Alimento?: StringFieldUpdateOperationsInput | string
    Quantidade__g_?: IntFieldUpdateOperationsInput | number
    Energia__Kcal_?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Alimento?: StringFieldUpdateOperationsInput | string
    Quantidade__g_?: IntFieldUpdateOperationsInput | number
    Energia__Kcal_?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentosCreateManyInput = {
    id?: number
    Alimento: string
    Quantidade__g_: number
    Energia__Kcal_: number
  }

  export type AlimentosUpdateManyMutationInput = {
    Alimento?: StringFieldUpdateOperationsInput | string
    Quantidade__g_?: IntFieldUpdateOperationsInput | number
    Energia__Kcal_?: IntFieldUpdateOperationsInput | number
  }

  export type AlimentosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Alimento?: StringFieldUpdateOperationsInput | string
    Quantidade__g_?: IntFieldUpdateOperationsInput | number
    Energia__Kcal_?: IntFieldUpdateOperationsInput | number
  }

  export type frutasCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type frutasUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type frutasUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type frutasUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type frutasCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type frutasUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type frutasUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type sementesCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type sementesUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type sementesUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sementesUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type sementesCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type sementesUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sementesUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type cereais_e_tuberculosCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type cereais_e_tuberculosUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type cereais_e_tuberculosUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cereais_e_tuberculosUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type cereais_e_tuberculosCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type cereais_e_tuberculosUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cereais_e_tuberculosUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type verduras__hortali_as_e_derivadosCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
  }

  export type verduras__hortali_as_e_derivadosUncheckedCreateInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type verduras__hortali_as_e_derivadosUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type verduras__hortali_as_e_derivadosUncheckedUpdateInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type verduras__hortali_as_e_derivadosCreateManyInput = {
    Alimento?: string | null
    Quantidade__g_?: number | null
    Energia__Kcal_?: number | null
    id?: number
  }

  export type verduras__hortali_as_e_derivadosUpdateManyMutationInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type verduras__hortali_as_e_derivadosUncheckedUpdateManyInput = {
    Alimento?: NullableStringFieldUpdateOperationsInput | string | null
    Quantidade__g_?: NullableIntFieldUpdateOperationsInput | number | null
    Energia__Kcal_?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type gordurasOrderByRelevanceInput = {
    fields: gordurasOrderByRelevanceFieldEnum | gordurasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type gordurasCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type gordurasAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type gordurasMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type gordurasMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type gordurasSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type leguminosasOrderByRelevanceInput = {
    fields: leguminosasOrderByRelevanceFieldEnum | leguminosasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type leguminosasCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leguminosasAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leguminosasMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leguminosasMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leguminosasSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leite_e_derivadosOrderByRelevanceInput = {
    fields: leite_e_derivadosOrderByRelevanceFieldEnum | leite_e_derivadosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type leite_e_derivadosCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leite_e_derivadosAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leite_e_derivadosMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leite_e_derivadosMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type leite_e_derivadosSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type proteinaOrderByRelevanceInput = {
    fields: proteinaOrderByRelevanceFieldEnum | proteinaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type proteinaCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type proteinaAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type proteinaMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type proteinaMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type proteinaSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AlimentosOrderByRelevanceInput = {
    fields: AlimentosOrderByRelevanceFieldEnum | AlimentosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AlimentosCountOrderByAggregateInput = {
    id?: SortOrder
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
  }

  export type AlimentosAvgOrderByAggregateInput = {
    id?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
  }

  export type AlimentosMaxOrderByAggregateInput = {
    id?: SortOrder
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
  }

  export type AlimentosMinOrderByAggregateInput = {
    id?: SortOrder
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
  }

  export type AlimentosSumOrderByAggregateInput = {
    id?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type frutasOrderByRelevanceInput = {
    fields: frutasOrderByRelevanceFieldEnum | frutasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type frutasCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type frutasAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type frutasMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type frutasMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type frutasSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type sementesOrderByRelevanceInput = {
    fields: sementesOrderByRelevanceFieldEnum | sementesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type sementesCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type sementesAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type sementesMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type sementesMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type sementesSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type cereais_e_tuberculosOrderByRelevanceInput = {
    fields: cereais_e_tuberculosOrderByRelevanceFieldEnum | cereais_e_tuberculosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type cereais_e_tuberculosCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type cereais_e_tuberculosAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type cereais_e_tuberculosMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type cereais_e_tuberculosMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type cereais_e_tuberculosSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type verduras__hortali_as_e_derivadosOrderByRelevanceInput = {
    fields: verduras__hortali_as_e_derivadosOrderByRelevanceFieldEnum | verduras__hortali_as_e_derivadosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type verduras__hortali_as_e_derivadosCountOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type verduras__hortali_as_e_derivadosAvgOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type verduras__hortali_as_e_derivadosMaxOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type verduras__hortali_as_e_derivadosMinOrderByAggregateInput = {
    Alimento?: SortOrder
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type verduras__hortali_as_e_derivadosSumOrderByAggregateInput = {
    Quantidade__g_?: SortOrder
    Energia__Kcal_?: SortOrder
    id?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}